// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_file_share::_delete_file_share_output::DeleteFileShareOutputBuilder;

pub use crate::operation::delete_file_share::_delete_file_share_input::DeleteFileShareInputBuilder;

impl DeleteFileShareInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::delete_file_share::DeleteFileShareOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::delete_file_share::DeleteFileShareError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.delete_file_share();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `DeleteFileShare`.
/// 
/// <p>Deletes a file share from an S3 File Gateway. This operation is only supported for S3 File Gateways.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteFileShareFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::delete_file_share::builders::DeleteFileShareInputBuilder,
}
impl DeleteFileShareFluentBuilder  {
    /// Creates a new `DeleteFileShare`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the DeleteFileShare as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_file_share::builders::DeleteFileShareInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::delete_file_share::DeleteFileShare, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::delete_file_share::DeleteFileShareError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::delete_file_share::DeleteFileShareOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_file_share::DeleteFileShareError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::delete_file_share::DeleteFileShareOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_file_share::DeleteFileShareError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::delete_file_share::DeleteFileShare, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::delete_file_share::DeleteFileShareError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The Amazon Resource Name (ARN) of the file share to be deleted.</p>
    pub fn file_share_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.file_share_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the file share to be deleted.</p>
    pub fn set_file_share_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_file_share_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the file share to be deleted.</p>
    pub fn get_file_share_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_file_share_arn()
    }
    /// <p>If this value is set to <code>true</code>, the operation deletes a file share immediately and aborts all data uploads to Amazon Web Services. Otherwise, the file share is not deleted until all data is uploaded to Amazon Web Services. This process aborts the data upload process, and the file share enters the <code>FORCE_DELETING</code> status.</p> 
    /// <p>Valid Values: <code>true</code> | <code>false</code> </p>
    pub fn force_delete(mut self, input: bool) -> Self {
        self.inner = self.inner.force_delete(input);
        self
    }
    /// <p>If this value is set to <code>true</code>, the operation deletes a file share immediately and aborts all data uploads to Amazon Web Services. Otherwise, the file share is not deleted until all data is uploaded to Amazon Web Services. This process aborts the data upload process, and the file share enters the <code>FORCE_DELETING</code> status.</p> 
    /// <p>Valid Values: <code>true</code> | <code>false</code> </p>
    pub fn set_force_delete(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_delete(input);
        self
    }
    /// <p>If this value is set to <code>true</code>, the operation deletes a file share immediately and aborts all data uploads to Amazon Web Services. Otherwise, the file share is not deleted until all data is uploaded to Amazon Web Services. This process aborts the data upload process, and the file share enters the <code>FORCE_DELETING</code> status.</p> 
    /// <p>Valid Values: <code>true</code> | <code>false</code> </p>
    pub fn get_force_delete(&self) -> &::std::option::Option<bool> {
        self.inner.get_force_delete()
    }
}

