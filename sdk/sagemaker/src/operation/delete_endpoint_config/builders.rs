// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_endpoint_config::_delete_endpoint_config_output::DeleteEndpointConfigOutputBuilder;

pub use crate::operation::delete_endpoint_config::_delete_endpoint_config_input::DeleteEndpointConfigInputBuilder;

impl DeleteEndpointConfigInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::delete_endpoint_config::DeleteEndpointConfigOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::delete_endpoint_config::DeleteEndpointConfigError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.delete_endpoint_config();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `DeleteEndpointConfig`.
/// 
/// <p>Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code> API deletes only the specified configuration. It does not delete endpoints created using the configuration. </p> 
/// <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. If you delete the <code>EndpointConfig</code> of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteEndpointConfigFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::delete_endpoint_config::builders::DeleteEndpointConfigInputBuilder,
}
impl DeleteEndpointConfigFluentBuilder  {
    /// Creates a new `DeleteEndpointConfig`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the DeleteEndpointConfig as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_endpoint_config::builders::DeleteEndpointConfigInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::delete_endpoint_config::DeleteEndpointConfig, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::delete_endpoint_config::DeleteEndpointConfigError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::delete_endpoint_config::DeleteEndpointConfigOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_endpoint_config::DeleteEndpointConfigError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::delete_endpoint_config::DeleteEndpointConfigOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_endpoint_config::DeleteEndpointConfigError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::delete_endpoint_config::DeleteEndpointConfig, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::delete_endpoint_config::DeleteEndpointConfigError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The name of the endpoint configuration that you want to delete.</p>
    pub fn endpoint_config_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.endpoint_config_name(input.into());
        self
    }
    /// <p>The name of the endpoint configuration that you want to delete.</p>
    pub fn set_endpoint_config_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_config_name(input);
        self
    }
    /// <p>The name of the endpoint configuration that you want to delete.</p>
    pub fn get_endpoint_config_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_endpoint_config_name()
    }
}

