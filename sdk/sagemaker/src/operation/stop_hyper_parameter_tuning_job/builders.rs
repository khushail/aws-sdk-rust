// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::stop_hyper_parameter_tuning_job::_stop_hyper_parameter_tuning_job_output::StopHyperParameterTuningJobOutputBuilder;

pub use crate::operation::stop_hyper_parameter_tuning_job::_stop_hyper_parameter_tuning_job_input::StopHyperParameterTuningJobInputBuilder;

impl StopHyperParameterTuningJobInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.stop_hyper_parameter_tuning_job();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `StopHyperParameterTuningJob`.
/// 
/// <p>Stops a running hyperparameter tuning job and all running training jobs that the tuning job launched.</p> 
/// <p>All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the tuning job moves to the <code>Stopped</code> state, it releases all reserved resources for the tuning job.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StopHyperParameterTuningJobFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::stop_hyper_parameter_tuning_job::builders::StopHyperParameterTuningJobInputBuilder,
}
impl StopHyperParameterTuningJobFluentBuilder  {
    /// Creates a new `StopHyperParameterTuningJob`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the StopHyperParameterTuningJob as a reference.
    pub fn as_input(&self) -> &crate::operation::stop_hyper_parameter_tuning_job::builders::StopHyperParameterTuningJobInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJob, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobOutput, ::aws_smithy_http::result::SdkError<crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobOutput, ::aws_smithy_http::result::SdkError<crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJob, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::stop_hyper_parameter_tuning_job::StopHyperParameterTuningJobError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The name of the tuning job to stop.</p>
    pub fn hyper_parameter_tuning_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hyper_parameter_tuning_job_name(input.into());
        self
    }
    /// <p>The name of the tuning job to stop.</p>
    pub fn set_hyper_parameter_tuning_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hyper_parameter_tuning_job_name(input);
        self
    }
    /// <p>The name of the tuning job to stop.</p>
    pub fn get_hyper_parameter_tuning_job_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hyper_parameter_tuning_job_name()
    }
}

