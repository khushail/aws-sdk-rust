// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_studio_lifecycle_config::_delete_studio_lifecycle_config_output::DeleteStudioLifecycleConfigOutputBuilder;

pub use crate::operation::delete_studio_lifecycle_config::_delete_studio_lifecycle_config_input::DeleteStudioLifecycleConfigInputBuilder;

impl DeleteStudioLifecycleConfigInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.delete_studio_lifecycle_config();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `DeleteStudioLifecycleConfig`.
/// 
/// <p>Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteStudioLifecycleConfigFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::delete_studio_lifecycle_config::builders::DeleteStudioLifecycleConfigInputBuilder,
}
impl DeleteStudioLifecycleConfigFluentBuilder  {
    /// Creates a new `DeleteStudioLifecycleConfig`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the DeleteStudioLifecycleConfig as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_studio_lifecycle_config::builders::DeleteStudioLifecycleConfigInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfig, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfig, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::delete_studio_lifecycle_config::DeleteStudioLifecycleConfigError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The name of the Studio Lifecycle Configuration to delete.</p>
    pub fn studio_lifecycle_config_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.studio_lifecycle_config_name(input.into());
        self
    }
    /// <p>The name of the Studio Lifecycle Configuration to delete.</p>
    pub fn set_studio_lifecycle_config_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_studio_lifecycle_config_name(input);
        self
    }
    /// <p>The name of the Studio Lifecycle Configuration to delete.</p>
    pub fn get_studio_lifecycle_config_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_studio_lifecycle_config_name()
    }
}

