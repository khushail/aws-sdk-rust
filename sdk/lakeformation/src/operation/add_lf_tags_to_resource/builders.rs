// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::add_lf_tags_to_resource::_add_lf_tags_to_resource_output::AddLfTagsToResourceOutputBuilder;

pub use crate::operation::add_lf_tags_to_resource::_add_lf_tags_to_resource_input::AddLfTagsToResourceInputBuilder;

impl AddLfTagsToResourceInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::add_lf_tags_to_resource::AddLfTagsToResourceOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::add_lf_tags_to_resource::AddLFTagsToResourceError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.add_lf_tags_to_resource();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `AddLFTagsToResource`.
/// 
/// <p>Attaches one or more LF-tags to an existing resource.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AddLFTagsToResourceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::add_lf_tags_to_resource::builders::AddLfTagsToResourceInputBuilder,
}
impl AddLFTagsToResourceFluentBuilder  {
    /// Creates a new `AddLFTagsToResource`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the AddLFTagsToResource as a reference.
    pub fn as_input(&self) -> &crate::operation::add_lf_tags_to_resource::builders::AddLfTagsToResourceInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::add_lf_tags_to_resource::AddLFTagsToResource, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::add_lf_tags_to_resource::AddLFTagsToResourceError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::add_lf_tags_to_resource::AddLfTagsToResourceOutput, ::aws_smithy_http::result::SdkError<crate::operation::add_lf_tags_to_resource::AddLFTagsToResourceError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::add_lf_tags_to_resource::AddLfTagsToResourceOutput, ::aws_smithy_http::result::SdkError<crate::operation::add_lf_tags_to_resource::AddLFTagsToResourceError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::add_lf_tags_to_resource::AddLFTagsToResource, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::add_lf_tags_to_resource::AddLFTagsToResourceError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.catalog_id(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_catalog_id(input);
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_catalog_id()
    }
    /// <p>The database, table, or column resource to which to attach an LF-tag.</p>
    pub fn resource(mut self, input: crate::types::Resource) -> Self {
        self.inner = self.inner.resource(input);
        self
    }
    /// <p>The database, table, or column resource to which to attach an LF-tag.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::Resource>) -> Self {
        self.inner = self.inner.set_resource(input);
        self
    }
    /// <p>The database, table, or column resource to which to attach an LF-tag.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::Resource> {
        self.inner.get_resource()
    }
    /// Appends an item to `LFTags`.
    ///
    /// To override the contents of this collection use [`set_lf_tags`](Self::set_lf_tags).
    ///
    /// <p>The LF-tags to attach to the resource.</p>
    pub fn lf_tags(mut self, input: crate::types::LfTagPair) -> Self {
        self.inner = self.inner.lf_tags(input);
        self
    }
    /// <p>The LF-tags to attach to the resource.</p>
    pub fn set_lf_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LfTagPair>>) -> Self {
        self.inner = self.inner.set_lf_tags(input);
        self
    }
    /// <p>The LF-tags to attach to the resource.</p>
    pub fn get_lf_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LfTagPair>> {
        self.inner.get_lf_tags()
    }
}

