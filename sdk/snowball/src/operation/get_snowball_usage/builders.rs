// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_snowball_usage::_get_snowball_usage_output::GetSnowballUsageOutputBuilder;

pub use crate::operation::get_snowball_usage::_get_snowball_usage_input::GetSnowballUsageInputBuilder;

impl GetSnowballUsageInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::get_snowball_usage::GetSnowballUsageOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::get_snowball_usage::GetSnowballUsageError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.get_snowball_usage();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `GetSnowballUsage`.
/// 
/// <p>Returns information about the Snow Family service limit for your account, and also the number of Snow devices your account has in use.</p> 
/// <p>The default service limit for the number of Snow devices that you can have at one time is 1. If you want to increase your service limit, contact Amazon Web Services Support.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetSnowballUsageFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::get_snowball_usage::builders::GetSnowballUsageInputBuilder,
}
impl GetSnowballUsageFluentBuilder  {
    /// Creates a new `GetSnowballUsage`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the GetSnowballUsage as a reference.
    pub fn as_input(&self) -> &crate::operation::get_snowball_usage::builders::GetSnowballUsageInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::get_snowball_usage::GetSnowballUsage, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::get_snowball_usage::GetSnowballUsageError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::get_snowball_usage::GetSnowballUsageOutput, ::aws_smithy_http::result::SdkError<crate::operation::get_snowball_usage::GetSnowballUsageError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::get_snowball_usage::GetSnowballUsageOutput, ::aws_smithy_http::result::SdkError<crate::operation::get_snowball_usage::GetSnowballUsageError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::get_snowball_usage::GetSnowballUsage, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::get_snowball_usage::GetSnowballUsageError>
                            >  {
                                self.customize_middleware().await
                            }
}

