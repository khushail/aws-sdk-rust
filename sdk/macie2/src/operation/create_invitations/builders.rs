// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_invitations::_create_invitations_output::CreateInvitationsOutputBuilder;

pub use crate::operation::create_invitations::_create_invitations_input::CreateInvitationsInputBuilder;

impl CreateInvitationsInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::create_invitations::CreateInvitationsOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::create_invitations::CreateInvitationsError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.create_invitations();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `CreateInvitations`.
/// 
/// <p>Sends an Amazon Macie membership invitation to one or more accounts.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateInvitationsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::create_invitations::builders::CreateInvitationsInputBuilder,
}
impl CreateInvitationsFluentBuilder  {
    /// Creates a new `CreateInvitations`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the CreateInvitations as a reference.
    pub fn as_input(&self) -> &crate::operation::create_invitations::builders::CreateInvitationsInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::create_invitations::CreateInvitations, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::create_invitations::CreateInvitationsError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::create_invitations::CreateInvitationsOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_invitations::CreateInvitationsError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::create_invitations::CreateInvitationsOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_invitations::CreateInvitationsError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::create_invitations::CreateInvitations, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::create_invitations::CreateInvitationsError>
                            >  {
                                self.customize_middleware().await
                            }
    /// Appends an item to `accountIds`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>An array that lists Amazon Web Services account IDs, one for each account to send the invitation to.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_ids(input.into());
        self
    }
    /// <p>An array that lists Amazon Web Services account IDs, one for each account to send the invitation to.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_account_ids(input);
        self
    }
    /// <p>An array that lists Amazon Web Services account IDs, one for each account to send the invitation to.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_account_ids()
    }
    /// <p>Specifies whether to send the invitation as an email message. If this value is false, Amazon Macie sends the invitation (as an email message) to the email address that you specified for the recipient's account when you associated the account with your account. The default value is false.</p>
    pub fn disable_email_notification(mut self, input: bool) -> Self {
        self.inner = self.inner.disable_email_notification(input);
        self
    }
    /// <p>Specifies whether to send the invitation as an email message. If this value is false, Amazon Macie sends the invitation (as an email message) to the email address that you specified for the recipient's account when you associated the account with your account. The default value is false.</p>
    pub fn set_disable_email_notification(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_disable_email_notification(input);
        self
    }
    /// <p>Specifies whether to send the invitation as an email message. If this value is false, Amazon Macie sends the invitation (as an email message) to the email address that you specified for the recipient's account when you associated the account with your account. The default value is false.</p>
    pub fn get_disable_email_notification(&self) -> &::std::option::Option<bool> {
        self.inner.get_disable_email_notification()
    }
    /// <p>Custom text to include in the email message that contains the invitation. The text can contain as many as 80 alphanumeric characters.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.message(input.into());
        self
    }
    /// <p>Custom text to include in the email message that contains the invitation. The text can contain as many as 80 alphanumeric characters.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_message(input);
        self
    }
    /// <p>Custom text to include in the email message that contains the invitation. The text can contain as many as 80 alphanumeric characters.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_message()
    }
}

