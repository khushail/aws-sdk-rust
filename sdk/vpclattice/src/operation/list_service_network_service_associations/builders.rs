// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_service_network_service_associations::_list_service_network_service_associations_output::ListServiceNetworkServiceAssociationsOutputBuilder;

pub use crate::operation::list_service_network_service_associations::_list_service_network_service_associations_input::ListServiceNetworkServiceAssociationsInputBuilder;

impl ListServiceNetworkServiceAssociationsInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.list_service_network_service_associations();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `ListServiceNetworkServiceAssociations`.
/// 
/// <p>Lists the associations between the service network and the service. You can filter the list either by service or service network. You must provide either the service network identifier or the service identifier.</p> 
/// <p>Every association in Amazon VPC Lattice is given a unique Amazon Resource Name (ARN), such as when a service network is associated with a VPC or when a service is associated with a service network. If the association is for a resource that is shared with another account, the association will include the local account ID as the prefix in the ARN for each account the resource is shared with.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListServiceNetworkServiceAssociationsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::list_service_network_service_associations::builders::ListServiceNetworkServiceAssociationsInputBuilder,
}
impl ListServiceNetworkServiceAssociationsFluentBuilder  {
    /// Creates a new `ListServiceNetworkServiceAssociations`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the ListServiceNetworkServiceAssociations as a reference.
    pub fn as_input(&self) -> &crate::operation::list_service_network_service_associations::builders::ListServiceNetworkServiceAssociationsInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociations, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsOutput, ::aws_smithy_http::result::SdkError<crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsOutput, ::aws_smithy_http::result::SdkError<crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociations, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError>
                            >  {
                                self.customize_middleware().await
                            }
    /// Create a paginator for this request
                            ///
                            /// Paginators are used by calling [`send().await`](crate::operation::list_service_network_service_associations::paginator::ListServiceNetworkServiceAssociationsPaginator::send) which returns a `Stream`.
                            pub fn into_paginator(self) -> crate::operation::list_service_network_service_associations::paginator::ListServiceNetworkServiceAssociationsPaginator {
                                crate::operation::list_service_network_service_associations::paginator::ListServiceNetworkServiceAssociationsPaginator::new(self.handle, self.inner)
                            }
    /// <p>The ID or Amazon Resource Name (ARN) of the service network.</p>
    pub fn service_network_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_network_identifier(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service network.</p>
    pub fn set_service_network_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_network_identifier(input);
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service network.</p>
    pub fn get_service_network_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_network_identifier()
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub fn service_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_identifier(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub fn set_service_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_identifier(input);
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub fn get_service_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_identifier()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>A pagination token for the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A pagination token for the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A pagination token for the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}

