// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_automation_rule::_create_automation_rule_output::CreateAutomationRuleOutputBuilder;

pub use crate::operation::create_automation_rule::_create_automation_rule_input::CreateAutomationRuleInputBuilder;

impl CreateAutomationRuleInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::create_automation_rule::CreateAutomationRuleOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::create_automation_rule::CreateAutomationRuleError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.create_automation_rule();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `CreateAutomationRule`.
/// 
/// <p> Creates an automation rule based on input parameters. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateAutomationRuleFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::create_automation_rule::builders::CreateAutomationRuleInputBuilder,
}
impl CreateAutomationRuleFluentBuilder  {
    /// Creates a new `CreateAutomationRule`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the CreateAutomationRule as a reference.
    pub fn as_input(&self) -> &crate::operation::create_automation_rule::builders::CreateAutomationRuleInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::create_automation_rule::CreateAutomationRule, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::create_automation_rule::CreateAutomationRuleError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::create_automation_rule::CreateAutomationRuleOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_automation_rule::CreateAutomationRuleError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::create_automation_rule::CreateAutomationRuleOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_automation_rule::CreateAutomationRuleError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::create_automation_rule::CreateAutomationRule, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::create_automation_rule::CreateAutomationRuleError>
                            >  {
                                self.customize_middleware().await
                            }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> User-defined tags that help you label the purpose of a rule. </p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> User-defined tags that help you label the purpose of a rule. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p> User-defined tags that help you label the purpose of a rule. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p> Whether the rule is active after it is created. If this parameter is equal to <code>Enabled</code>, Security Hub will apply the rule to findings and finding updates after the rule is created. To change the value of this parameter after creating a rule, use <code>BatchUpdateAutomationRules</code>. </p>
    pub fn rule_status(mut self, input: crate::types::RuleStatus) -> Self {
        self.inner = self.inner.rule_status(input);
        self
    }
    /// <p> Whether the rule is active after it is created. If this parameter is equal to <code>Enabled</code>, Security Hub will apply the rule to findings and finding updates after the rule is created. To change the value of this parameter after creating a rule, use <code>BatchUpdateAutomationRules</code>. </p>
    pub fn set_rule_status(mut self, input: ::std::option::Option<crate::types::RuleStatus>) -> Self {
        self.inner = self.inner.set_rule_status(input);
        self
    }
    /// <p> Whether the rule is active after it is created. If this parameter is equal to <code>Enabled</code>, Security Hub will apply the rule to findings and finding updates after the rule is created. To change the value of this parameter after creating a rule, use <code>BatchUpdateAutomationRules</code>. </p>
    pub fn get_rule_status(&self) -> &::std::option::Option<crate::types::RuleStatus> {
        self.inner.get_rule_status()
    }
    /// <p>An integer ranging from 1 to 1000 that represents the order in which the rule action is applied to findings. Security Hub applies rules with lower values for this parameter first. </p>
    pub fn rule_order(mut self, input: i32) -> Self {
        self.inner = self.inner.rule_order(input);
        self
    }
    /// <p>An integer ranging from 1 to 1000 that represents the order in which the rule action is applied to findings. Security Hub applies rules with lower values for this parameter first. </p>
    pub fn set_rule_order(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_rule_order(input);
        self
    }
    /// <p>An integer ranging from 1 to 1000 that represents the order in which the rule action is applied to findings. Security Hub applies rules with lower values for this parameter first. </p>
    pub fn get_rule_order(&self) -> &::std::option::Option<i32> {
        self.inner.get_rule_order()
    }
    /// <p> The name of the rule. </p>
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.rule_name(input.into());
        self
    }
    /// <p> The name of the rule. </p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_rule_name(input);
        self
    }
    /// <p> The name of the rule. </p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_rule_name()
    }
    /// <p> A description of the rule. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> A description of the rule. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> A description of the rule. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>Specifies whether a rule is the last to be applied with respect to a finding that matches the rule criteria. This is useful when a finding matches the criteria for multiple rules, and each rule has different actions. If the value of this field is set to <code>true</code> for a rule, Security Hub applies the rule action to a finding that matches the rule criteria and won't evaluate other rules for the finding. The default value of this field is <code>false</code>. </p>
    pub fn is_terminal(mut self, input: bool) -> Self {
        self.inner = self.inner.is_terminal(input);
        self
    }
    /// <p>Specifies whether a rule is the last to be applied with respect to a finding that matches the rule criteria. This is useful when a finding matches the criteria for multiple rules, and each rule has different actions. If the value of this field is set to <code>true</code> for a rule, Security Hub applies the rule action to a finding that matches the rule criteria and won't evaluate other rules for the finding. The default value of this field is <code>false</code>. </p>
    pub fn set_is_terminal(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_terminal(input);
        self
    }
    /// <p>Specifies whether a rule is the last to be applied with respect to a finding that matches the rule criteria. This is useful when a finding matches the criteria for multiple rules, and each rule has different actions. If the value of this field is set to <code>true</code> for a rule, Security Hub applies the rule action to a finding that matches the rule criteria and won't evaluate other rules for the finding. The default value of this field is <code>false</code>. </p>
    pub fn get_is_terminal(&self) -> &::std::option::Option<bool> {
        self.inner.get_is_terminal()
    }
    /// <p> A set of ASFF finding field attributes and corresponding expected values that Security Hub uses to filter findings. If a finding matches the conditions specified in this parameter, Security Hub applies the rule action to the finding. </p>
    pub fn criteria(mut self, input: crate::types::AutomationRulesFindingFilters) -> Self {
        self.inner = self.inner.criteria(input);
        self
    }
    /// <p> A set of ASFF finding field attributes and corresponding expected values that Security Hub uses to filter findings. If a finding matches the conditions specified in this parameter, Security Hub applies the rule action to the finding. </p>
    pub fn set_criteria(mut self, input: ::std::option::Option<crate::types::AutomationRulesFindingFilters>) -> Self {
        self.inner = self.inner.set_criteria(input);
        self
    }
    /// <p> A set of ASFF finding field attributes and corresponding expected values that Security Hub uses to filter findings. If a finding matches the conditions specified in this parameter, Security Hub applies the rule action to the finding. </p>
    pub fn get_criteria(&self) -> &::std::option::Option<crate::types::AutomationRulesFindingFilters> {
        self.inner.get_criteria()
    }
    /// Appends an item to `Actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p> One or more actions to update finding fields if a finding matches the conditions specified in <code>Criteria</code>. </p>
    pub fn actions(mut self, input: crate::types::AutomationRulesAction) -> Self {
        self.inner = self.inner.actions(input);
        self
    }
    /// <p> One or more actions to update finding fields if a finding matches the conditions specified in <code>Criteria</code>. </p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomationRulesAction>>) -> Self {
        self.inner = self.inner.set_actions(input);
        self
    }
    /// <p> One or more actions to update finding fields if a finding matches the conditions specified in <code>Criteria</code>. </p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomationRulesAction>> {
        self.inner.get_actions()
    }
}

