// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::attach_network_interface::_attach_network_interface_output::AttachNetworkInterfaceOutputBuilder;

pub use crate::operation::attach_network_interface::_attach_network_interface_input::AttachNetworkInterfaceInputBuilder;

impl AttachNetworkInterfaceInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::attach_network_interface::AttachNetworkInterfaceOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::attach_network_interface::AttachNetworkInterfaceError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.attach_network_interface();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `AttachNetworkInterface`.
/// 
/// <p>Attaches a network interface to an instance.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AttachNetworkInterfaceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::attach_network_interface::builders::AttachNetworkInterfaceInputBuilder,
}
impl AttachNetworkInterfaceFluentBuilder  {
    /// Creates a new `AttachNetworkInterface`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the AttachNetworkInterface as a reference.
    pub fn as_input(&self) -> &crate::operation::attach_network_interface::builders::AttachNetworkInterfaceInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::attach_network_interface::AttachNetworkInterface, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::attach_network_interface::AttachNetworkInterfaceError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::attach_network_interface::AttachNetworkInterfaceOutput, ::aws_smithy_http::result::SdkError<crate::operation::attach_network_interface::AttachNetworkInterfaceError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::attach_network_interface::AttachNetworkInterfaceOutput, ::aws_smithy_http::result::SdkError<crate::operation::attach_network_interface::AttachNetworkInterfaceError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::attach_network_interface::AttachNetworkInterface, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::attach_network_interface::AttachNetworkInterfaceError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The index of the device for the network interface attachment.</p>
    pub fn device_index(mut self, input: i32) -> Self {
        self.inner = self.inner.device_index(input);
        self
    }
    /// <p>The index of the device for the network interface attachment.</p>
    pub fn set_device_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_device_index(input);
        self
    }
    /// <p>The index of the device for the network interface attachment.</p>
    pub fn get_device_index(&self) -> &::std::option::Option<i32> {
        self.inner.get_device_index()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_id()
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.network_interface_id(input.into());
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn set_network_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_network_interface_id(input);
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn get_network_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_network_interface_id()
    }
    /// <p>The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.</p>
    pub fn network_card_index(mut self, input: i32) -> Self {
        self.inner = self.inner.network_card_index(input);
        self
    }
    /// <p>The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.</p>
    pub fn set_network_card_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_network_card_index(input);
        self
    }
    /// <p>The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.</p>
    pub fn get_network_card_index(&self) -> &::std::option::Option<i32> {
        self.inner.get_network_card_index()
    }
    /// <p>Configures ENA Express for the network interface that this action attaches to the instance.</p>
    pub fn ena_srd_specification(mut self, input: crate::types::EnaSrdSpecification) -> Self {
        self.inner = self.inner.ena_srd_specification(input);
        self
    }
    /// <p>Configures ENA Express for the network interface that this action attaches to the instance.</p>
    pub fn set_ena_srd_specification(mut self, input: ::std::option::Option<crate::types::EnaSrdSpecification>) -> Self {
        self.inner = self.inner.set_ena_srd_specification(input);
        self
    }
    /// <p>Configures ENA Express for the network interface that this action attaches to the instance.</p>
    pub fn get_ena_srd_specification(&self) -> &::std::option::Option<crate::types::EnaSrdSpecification> {
        self.inner.get_ena_srd_specification()
    }
}

