// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_instance::_import_instance_output::ImportInstanceOutputBuilder;

pub use crate::operation::import_instance::_import_instance_input::ImportInstanceInputBuilder;

impl ImportInstanceInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::import_instance::ImportInstanceOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::import_instance::ImportInstanceError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.import_instance();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `ImportInstance`.
/// 
/// <p>Creates an import instance task using metadata from the specified disk image.</p> 
/// <p>This API action supports only single-volume VMs. To import multi-volume VMs, use <code>ImportImage</code> instead.</p> 
/// <p>This API action is not supported by the Command Line Interface (CLI). For information about using the Amazon EC2 CLI, which is deprecated, see <a href="https://awsdocs.s3.amazonaws.com/EC2/ec2-clt.pdf#UsingVirtualMachinesinAmazonEC2">Importing a VM to Amazon EC2</a> in the <i>Amazon EC2 CLI Reference</i> PDF file.</p> 
/// <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ImportInstanceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::import_instance::builders::ImportInstanceInputBuilder,
}
impl ImportInstanceFluentBuilder  {
    /// Creates a new `ImportInstance`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the ImportInstance as a reference.
    pub fn as_input(&self) -> &crate::operation::import_instance::builders::ImportInstanceInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::import_instance::ImportInstance, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::import_instance::ImportInstanceError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::import_instance::ImportInstanceOutput, ::aws_smithy_http::result::SdkError<crate::operation::import_instance::ImportInstanceError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::import_instance::ImportInstanceOutput, ::aws_smithy_http::result::SdkError<crate::operation::import_instance::ImportInstanceError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::import_instance::ImportInstance, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::import_instance::ImportInstanceError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>A description for the instance being imported.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the instance being imported.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description for the instance being imported.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// Appends an item to `DiskImages`.
    ///
    /// To override the contents of this collection use [`set_disk_images`](Self::set_disk_images).
    ///
    /// <p>The disk image.</p>
    pub fn disk_images(mut self, input: crate::types::DiskImage) -> Self {
        self.inner = self.inner.disk_images(input);
        self
    }
    /// <p>The disk image.</p>
    pub fn set_disk_images(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DiskImage>>) -> Self {
        self.inner = self.inner.set_disk_images(input);
        self
    }
    /// <p>The disk image.</p>
    pub fn get_disk_images(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DiskImage>> {
        self.inner.get_disk_images()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The launch specification.</p>
    pub fn launch_specification(mut self, input: crate::types::ImportInstanceLaunchSpecification) -> Self {
        self.inner = self.inner.launch_specification(input);
        self
    }
    /// <p>The launch specification.</p>
    pub fn set_launch_specification(mut self, input: ::std::option::Option<crate::types::ImportInstanceLaunchSpecification>) -> Self {
        self.inner = self.inner.set_launch_specification(input);
        self
    }
    /// <p>The launch specification.</p>
    pub fn get_launch_specification(&self) -> &::std::option::Option<crate::types::ImportInstanceLaunchSpecification> {
        self.inner.get_launch_specification()
    }
    /// <p>The instance operating system.</p>
    pub fn platform(mut self, input: crate::types::PlatformValues) -> Self {
        self.inner = self.inner.platform(input);
        self
    }
    /// <p>The instance operating system.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<crate::types::PlatformValues>) -> Self {
        self.inner = self.inner.set_platform(input);
        self
    }
    /// <p>The instance operating system.</p>
    pub fn get_platform(&self) -> &::std::option::Option<crate::types::PlatformValues> {
        self.inner.get_platform()
    }
}

