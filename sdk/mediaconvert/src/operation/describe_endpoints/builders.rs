// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_endpoints::_describe_endpoints_output::DescribeEndpointsOutputBuilder;

pub use crate::operation::describe_endpoints::_describe_endpoints_input::DescribeEndpointsInputBuilder;

impl DescribeEndpointsInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::describe_endpoints::DescribeEndpointsOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::describe_endpoints::DescribeEndpointsError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.describe_endpoints();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `DescribeEndpoints`.
/// 
/// Send an request with an empty body to the regional API endpoint to get your account API endpoint.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeEndpointsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::describe_endpoints::builders::DescribeEndpointsInputBuilder,
}
impl DescribeEndpointsFluentBuilder  {
    /// Creates a new `DescribeEndpoints`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the DescribeEndpoints as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_endpoints::builders::DescribeEndpointsInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::describe_endpoints::DescribeEndpoints, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::describe_endpoints::DescribeEndpointsError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::describe_endpoints::DescribeEndpointsOutput, ::aws_smithy_http::result::SdkError<crate::operation::describe_endpoints::DescribeEndpointsError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::describe_endpoints::DescribeEndpointsOutput, ::aws_smithy_http::result::SdkError<crate::operation::describe_endpoints::DescribeEndpointsError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::describe_endpoints::DescribeEndpoints, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::describe_endpoints::DescribeEndpointsError>
                            >  {
                                self.customize_middleware().await
                            }
    /// Create a paginator for this request
                            ///
                            /// Paginators are used by calling [`send().await`](crate::operation::describe_endpoints::paginator::DescribeEndpointsPaginator::send) which returns a `Stream`.
                            pub fn into_paginator(self) -> crate::operation::describe_endpoints::paginator::DescribeEndpointsPaginator {
                                crate::operation::describe_endpoints::paginator::DescribeEndpointsPaginator::new(self.handle, self.inner)
                            }
    /// Optional. Max number of endpoints, up to twenty, that will be returned at one time.
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// Optional. Max number of endpoints, up to twenty, that will be returned at one time.
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// Optional. Max number of endpoints, up to twenty, that will be returned at one time.
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
    pub fn mode(mut self, input: crate::types::DescribeEndpointsMode) -> Self {
        self.inner = self.inner.mode(input);
        self
    }
    /// Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::DescribeEndpointsMode>) -> Self {
        self.inner = self.inner.set_mode(input);
        self
    }
    /// Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::DescribeEndpointsMode> {
        self.inner.get_mode()
    }
    /// Use this string, provided with the response to a previous request, to request the next batch of endpoints.
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// Use this string, provided with the response to a previous request, to request the next batch of endpoints.
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// Use this string, provided with the response to a previous request, to request the next batch of endpoints.
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}

