// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_flow::_create_flow_output::CreateFlowOutputBuilder;

pub use crate::operation::create_flow::_create_flow_input::CreateFlowInputBuilder;

impl CreateFlowInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::create_flow::CreateFlowOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::create_flow::CreateFlowError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.create_flow();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `CreateFlow`.
/// 
/// Creates a new flow. The request must include one source. The request optionally can include outputs (up to 50) and entitlements (up to 50).
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateFlowFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::create_flow::builders::CreateFlowInputBuilder,
}
impl CreateFlowFluentBuilder  {
    /// Creates a new `CreateFlow`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the CreateFlow as a reference.
    pub fn as_input(&self) -> &crate::operation::create_flow::builders::CreateFlowInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::create_flow::CreateFlow, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::create_flow::CreateFlowError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::create_flow::CreateFlowOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_flow::CreateFlowError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::create_flow::CreateFlowOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_flow::CreateFlowError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::create_flow::CreateFlow, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::create_flow::CreateFlowError>
                            >  {
                                self.customize_middleware().await
                            }
    /// The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.availability_zone(input.into());
        self
    }
    /// The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_availability_zone(input);
        self
    }
    /// The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_availability_zone()
    }
    /// Appends an item to `Entitlements`.
    ///
    /// To override the contents of this collection use [`set_entitlements`](Self::set_entitlements).
    ///
    /// The entitlements that you want to grant on a flow.
    pub fn entitlements(mut self, input: crate::types::GrantEntitlementRequest) -> Self {
        self.inner = self.inner.entitlements(input);
        self
    }
    /// The entitlements that you want to grant on a flow.
    pub fn set_entitlements(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GrantEntitlementRequest>>) -> Self {
        self.inner = self.inner.set_entitlements(input);
        self
    }
    /// The entitlements that you want to grant on a flow.
    pub fn get_entitlements(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GrantEntitlementRequest>> {
        self.inner.get_entitlements()
    }
    /// Appends an item to `MediaStreams`.
    ///
    /// To override the contents of this collection use [`set_media_streams`](Self::set_media_streams).
    ///
    /// The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.
    pub fn media_streams(mut self, input: crate::types::AddMediaStreamRequest) -> Self {
        self.inner = self.inner.media_streams(input);
        self
    }
    /// The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.
    pub fn set_media_streams(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AddMediaStreamRequest>>) -> Self {
        self.inner = self.inner.set_media_streams(input);
        self
    }
    /// The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.
    pub fn get_media_streams(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AddMediaStreamRequest>> {
        self.inner.get_media_streams()
    }
    /// The name of the flow.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// The name of the flow.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// The name of the flow.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// Appends an item to `Outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// The outputs that you want to add to this flow.
    pub fn outputs(mut self, input: crate::types::AddOutputRequest) -> Self {
        self.inner = self.inner.outputs(input);
        self
    }
    /// The outputs that you want to add to this flow.
    pub fn set_outputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AddOutputRequest>>) -> Self {
        self.inner = self.inner.set_outputs(input);
        self
    }
    /// The outputs that you want to add to this flow.
    pub fn get_outputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AddOutputRequest>> {
        self.inner.get_outputs()
    }
    /// The settings for the source of the flow.
    pub fn source(mut self, input: crate::types::SetSourceRequest) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// The settings for the source of the flow.
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::SetSourceRequest>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// The settings for the source of the flow.
    pub fn get_source(&self) -> &::std::option::Option<crate::types::SetSourceRequest> {
        self.inner.get_source()
    }
    /// The settings for source failover.
    pub fn source_failover_config(mut self, input: crate::types::FailoverConfig) -> Self {
        self.inner = self.inner.source_failover_config(input);
        self
    }
    /// The settings for source failover.
    pub fn set_source_failover_config(mut self, input: ::std::option::Option<crate::types::FailoverConfig>) -> Self {
        self.inner = self.inner.set_source_failover_config(input);
        self
    }
    /// The settings for source failover.
    pub fn get_source_failover_config(&self) -> &::std::option::Option<crate::types::FailoverConfig> {
        self.inner.get_source_failover_config()
    }
    /// Appends an item to `Sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn sources(mut self, input: crate::types::SetSourceRequest) -> Self {
        self.inner = self.inner.sources(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SetSourceRequest>>) -> Self {
        self.inner = self.inner.set_sources(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SetSourceRequest>> {
        self.inner.get_sources()
    }
    /// Appends an item to `VpcInterfaces`.
    ///
    /// To override the contents of this collection use [`set_vpc_interfaces`](Self::set_vpc_interfaces).
    ///
    /// The VPC interfaces you want on the flow.
    pub fn vpc_interfaces(mut self, input: crate::types::VpcInterfaceRequest) -> Self {
        self.inner = self.inner.vpc_interfaces(input);
        self
    }
    /// The VPC interfaces you want on the flow.
    pub fn set_vpc_interfaces(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VpcInterfaceRequest>>) -> Self {
        self.inner = self.inner.set_vpc_interfaces(input);
        self
    }
    /// The VPC interfaces you want on the flow.
    pub fn get_vpc_interfaces(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VpcInterfaceRequest>> {
        self.inner.get_vpc_interfaces()
    }
    /// Create maintenance setting for a flow
    pub fn maintenance(mut self, input: crate::types::AddMaintenance) -> Self {
        self.inner = self.inner.maintenance(input);
        self
    }
    /// Create maintenance setting for a flow
    pub fn set_maintenance(mut self, input: ::std::option::Option<crate::types::AddMaintenance>) -> Self {
        self.inner = self.inner.set_maintenance(input);
        self
    }
    /// Create maintenance setting for a flow
    pub fn get_maintenance(&self) -> &::std::option::Option<crate::types::AddMaintenance> {
        self.inner.get_maintenance()
    }
}

