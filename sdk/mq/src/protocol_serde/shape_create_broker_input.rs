// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_broker_input(
                     object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                     input: &crate::operation::create_broker::CreateBrokerInput,
                ) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.authentication_strategy {
        object.key("authenticationStrategy").string(var_1.as_str());
    }
    if let Some(var_2) = &input.auto_minor_version_upgrade {
        object.key("autoMinorVersionUpgrade").boolean(*var_2);
    }
    if let Some(var_3) = &input.broker_name {
        object.key("brokerName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("configuration").start_object();
        crate::protocol_serde::shape_configuration_id::ser_configuration_id(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.creator_request_id {
        object.key("creatorRequestId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.deployment_mode {
        object.key("deploymentMode").string(var_7.as_str());
    }
    if let Some(var_8) = &input.encryption_options {
        #[allow(unused_mut)]
        let mut object_9 = object.key("encryptionOptions").start_object();
        crate::protocol_serde::shape_encryption_options::ser_encryption_options(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.engine_type {
        object.key("engineType").string(var_10.as_str());
    }
    if let Some(var_11) = &input.engine_version {
        object.key("engineVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.host_instance_type {
        object.key("hostInstanceType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.ldap_server_metadata {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ldapServerMetadata").start_object();
        crate::protocol_serde::shape_ldap_server_metadata_input::ser_ldap_server_metadata_input(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.logs {
        #[allow(unused_mut)]
        let mut object_16 = object.key("logs").start_object();
        crate::protocol_serde::shape_logs::ser_logs(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.maintenance_window_start_time {
        #[allow(unused_mut)]
        let mut object_18 = object.key("maintenanceWindowStartTime").start_object();
        crate::protocol_serde::shape_weekly_start_time::ser_weekly_start_time(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.publicly_accessible {
        object.key("publiclyAccessible").boolean(*var_19);
    }
    if let Some(var_20) = &input.security_groups {
        let mut array_21 = object.key("securityGroups").start_array();
        for item_22 in var_20 {
             {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.storage_type {
        object.key("storageType").string(var_23.as_str());
    }
    if let Some(var_24) = &input.subnet_ids {
        let mut array_25 = object.key("subnetIds").start_array();
        for item_26 in var_24 {
             {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.tags {
        #[allow(unused_mut)]
        let mut object_28 = object.key("tags").start_object();
        for (key_29, value_30) in var_27 {
             {
                object_28.key(key_29.as_str()).string(value_30.as_str());
            }
        }
        object_28.finish();
    }
    if let Some(var_31) = &input.users {
        let mut array_32 = object.key("users").start_array();
        for item_33 in var_31 {
             {
                #[allow(unused_mut)]
                let mut object_34 = array_32.value().start_object();
                crate::protocol_serde::shape_user::ser_user(&mut object_34, item_33)?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    Ok(())
}

