// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_broker_input(
                     object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                     input: &crate::operation::update_broker::UpdateBrokerInput,
                ) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.authentication_strategy {
        object.key("authenticationStrategy").string(var_1.as_str());
    }
    if let Some(var_2) = &input.auto_minor_version_upgrade {
        object.key("autoMinorVersionUpgrade").boolean(*var_2);
    }
    if let Some(var_3) = &input.configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("configuration").start_object();
        crate::protocol_serde::shape_configuration_id::ser_configuration_id(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.engine_version {
        object.key("engineVersion").string(var_5.as_str());
    }
    if let Some(var_6) = &input.host_instance_type {
        object.key("hostInstanceType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.ldap_server_metadata {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ldapServerMetadata").start_object();
        crate::protocol_serde::shape_ldap_server_metadata_input::ser_ldap_server_metadata_input(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.logs {
        #[allow(unused_mut)]
        let mut object_10 = object.key("logs").start_object();
        crate::protocol_serde::shape_logs::ser_logs(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.maintenance_window_start_time {
        #[allow(unused_mut)]
        let mut object_12 = object.key("maintenanceWindowStartTime").start_object();
        crate::protocol_serde::shape_weekly_start_time::ser_weekly_start_time(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.security_groups {
        let mut array_14 = object.key("securityGroups").start_array();
        for item_15 in var_13 {
             {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    Ok(())
}

