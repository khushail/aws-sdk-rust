// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_decoder_manifests::_list_decoder_manifests_output::ListDecoderManifestsOutputBuilder;

pub use crate::operation::list_decoder_manifests::_list_decoder_manifests_input::ListDecoderManifestsInputBuilder;

impl ListDecoderManifestsInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::list_decoder_manifests::ListDecoderManifestsOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::list_decoder_manifests::ListDecoderManifestsError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.list_decoder_manifests();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `ListDecoderManifests`.
/// 
/// <p> Lists decoder manifests. </p> <note> 
/// <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> 
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListDecoderManifestsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::list_decoder_manifests::builders::ListDecoderManifestsInputBuilder,
}
impl ListDecoderManifestsFluentBuilder  {
    /// Creates a new `ListDecoderManifests`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the ListDecoderManifests as a reference.
    pub fn as_input(&self) -> &crate::operation::list_decoder_manifests::builders::ListDecoderManifestsInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::list_decoder_manifests::ListDecoderManifests, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::list_decoder_manifests::ListDecoderManifestsError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::list_decoder_manifests::ListDecoderManifestsOutput, ::aws_smithy_http::result::SdkError<crate::operation::list_decoder_manifests::ListDecoderManifestsError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::list_decoder_manifests::ListDecoderManifestsOutput, ::aws_smithy_http::result::SdkError<crate::operation::list_decoder_manifests::ListDecoderManifestsError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::list_decoder_manifests::ListDecoderManifests, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::list_decoder_manifests::ListDecoderManifestsError>
                            >  {
                                self.customize_middleware().await
                            }
    /// Create a paginator for this request
                            ///
                            /// Paginators are used by calling [`send().await`](crate::operation::list_decoder_manifests::paginator::ListDecoderManifestsPaginator::send) which returns a `Stream`.
                            pub fn into_paginator(self) -> crate::operation::list_decoder_manifests::paginator::ListDecoderManifestsPaginator {
                                crate::operation::list_decoder_manifests::paginator::ListDecoderManifestsPaginator::new(self.handle, self.inner)
                            }
    /// <p> The Amazon Resource Name (ARN) of a vehicle model (model manifest) associated with the decoder manifest. </p>
    pub fn model_manifest_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.model_manifest_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of a vehicle model (model manifest) associated with the decoder manifest. </p>
    pub fn set_model_manifest_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_model_manifest_arn(input);
        self
    }
    /// <p> The Amazon Resource Name (ARN) of a vehicle model (model manifest) associated with the decoder manifest. </p>
    pub fn get_model_manifest_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_model_manifest_arn()
    }
    /// <p>A pagination token for the next set of results.</p> 
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A pagination token for the next set of results.</p> 
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A pagination token for the next set of results.</p> 
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}

