// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

impl ListResourceRecordSetsInput {
    /// Consumes the builder and constructs an Operation<[`ListResourceRecordSets`](crate::operation::list_resource_record_sets::ListResourceRecordSets)>
    #[allow(unused_mut)]
    #[allow(clippy::let_and_return)]
    #[allow(clippy::needless_borrow)]
    pub async fn make_operation(mut self, _config: &crate::config::Config) -> ::std::result::Result<::aws_smithy_http::operation::Operation<crate::operation::list_resource_record_sets::ListResourceRecordSets, ::aws_http::retry::AwsResponseRetryClassifier>, ::aws_smithy_http::operation::error::BuildError> {
        assert_ne!(_config.retry_config().map(|rc| rc.mode()), ::std::option::Option::Some(::aws_smithy_types::retry::RetryMode::Adaptive), "Adaptive retry mode is unsupported, please use Standard mode or disable retries.");
        use ::aws_smithy_http::endpoint::ResolveEndpoint;
                                let params_result = crate::endpoint::Params::builder().set_region(_config.region.as_ref().map(|r|r.as_ref().to_owned()))
        .set_use_dual_stack(_config.use_dual_stack)
        .set_use_fips(_config.use_fips)
        .set_endpoint(_config.endpoint_url
        .clone()).build()
                                    .map_err(|err| ::aws_smithy_http::endpoint::ResolveEndpointError::from_source("could not construct endpoint parameters", err));
                                let (endpoint_result, params) = match params_result {
                                    ::std::result::Result::Ok(params) => (_config.endpoint_resolver.resolve_endpoint(&params), ::std::option::Option::Some(params)),
                                    ::std::result::Result::Err(e) => (::std::result::Result::Err(e), ::std::option::Option::None)
                                };
        crate::route53_resource_id_preprocessor_middleware::trim_resource_id(&mut self.hosted_zone_id);
        let mut request = {
            fn uri_base(_input: &crate::operation::list_resource_record_sets::ListResourceRecordSetsInput, output: &mut ::std::string::String) -> ::std::result::Result<(), ::aws_smithy_http::operation::error::BuildError> {
                use ::std::fmt::Write as _;
                let input_1 = &_input.hosted_zone_id;
                let input_1 = input_1.as_ref().ok_or_else(|| ::aws_smithy_http::operation::error::BuildError::missing_field("hosted_zone_id", "cannot be empty or unset"))?;
                let hosted_zone_id = ::aws_smithy_http::label::fmt_string(input_1, ::aws_smithy_http::label::EncodingStrategy::Default);
                if hosted_zone_id.is_empty() {
                                return ::std::result::Result::Err(::aws_smithy_http::operation::error::BuildError::missing_field("hosted_zone_id", "cannot be empty or unset"))
                            }
                ::std::write!(output, "/2013-04-01/hostedzone/{HostedZoneId}/rrset", HostedZoneId = hosted_zone_id).expect("formatting should succeed");
                ::std::result::Result::Ok(())
            }
            fn uri_query(_input: &crate::operation::list_resource_record_sets::ListResourceRecordSetsInput, mut output: &mut ::std::string::String) -> ::std::result::Result<(), ::aws_smithy_http::operation::error::BuildError> {
                let mut query = ::aws_smithy_http::query::Writer::new(output);
                if let ::std::option::Option::Some(inner_2) = &_input.start_record_name {
                     {
                        query.push_kv("name", &::aws_smithy_http::query::fmt_string(&inner_2));
                    }
                }
                if let ::std::option::Option::Some(inner_3) = &_input.start_record_type {
                     {
                        query.push_kv("type", &::aws_smithy_http::query::fmt_string(&inner_3));
                    }
                }
                if let ::std::option::Option::Some(inner_4) = &_input.start_record_identifier {
                     {
                        query.push_kv("identifier", &::aws_smithy_http::query::fmt_string(&inner_4));
                    }
                }
                if let ::std::option::Option::Some(inner_5) = &_input.max_items {
                    if *inner_5 != 0 {
                        query.push_kv("maxitems", ::aws_smithy_types::primitive::Encoder::from(*inner_5).encode());
                    }
                }
                ::std::result::Result::Ok(())
            }
            #[allow(clippy::unnecessary_wraps)]
            fn update_http_builder(
                            input: &crate::operation::list_resource_record_sets::ListResourceRecordSetsInput,
                            builder: ::http::request::Builder
                        ) -> ::std::result::Result<::http::request::Builder, ::aws_smithy_http::operation::error::BuildError> {
                let mut uri = ::std::string::String::new();
                uri_base(input, &mut uri)?;
                uri_query(input, &mut uri)?;
                ::std::result::Result::Ok(builder.method("GET").uri(uri))
            }
            let mut builder = update_http_builder(&self, ::http::request::Builder::new())?;
            builder
        };
        let mut properties = ::aws_smithy_http::property_bag::SharedPropertyBag::new();
        #[allow(clippy::useless_conversion)]
        let body = ::aws_smithy_http::body::SdkBody::from(
            ""
        );
        let request = request.body(body).expect("should be valid request");
        let mut request = ::aws_smithy_http::operation::Request::from_parts(request, properties);
        request.properties_mut().insert(endpoint_result);
        if let ::std::option::Option::Some(params) = params { request.properties_mut().insert(params); }
        request.properties_mut().insert(::aws_smithy_http::http_versions::DEFAULT_HTTP_VERSION_LIST.clone());
        request.properties_mut().insert(_config.time_source.clone());
        let mut user_agent = ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                                ::aws_types::os_shim_internal::Env::real(),
                                crate::meta::API_METADATA.clone(),
                            );
                            if let Some(app_name) = _config.app_name() {
                                user_agent = user_agent.with_app_name(app_name.clone());
                            }
                            request.properties_mut().insert(user_agent);
        let mut signing_config = ::aws_sig_auth::signer::OperationSigningConfig::default_config();
        request.properties_mut().insert(signing_config);
                            request.properties_mut().insert(::aws_types::SigningService::from_static(_config.signing_service()));
                            if let Some(region) = &_config.region {
                                request.properties_mut().insert(::aws_types::region::SigningRegion::from(region.clone()));
                            }
        if let Some(region) = &_config.region {
                                request.properties_mut().insert(region.clone());
                            }
        ::aws_http::auth::set_credentials_cache(&mut request.properties_mut(), _config.credentials_cache.clone());
        let op = ::aws_smithy_http::operation::Operation::new(request, crate::operation::list_resource_record_sets::ListResourceRecordSets::new())
                            .with_metadata(::aws_smithy_http::operation::Metadata::new("ListResourceRecordSets", "route53"));
        let op = op.with_retry_classifier(::aws_http::retry::AwsResponseRetryClassifier::new());
        ::std::result::Result::Ok(op)
    }
}
/// Orchestration and serialization glue logic for `ListResourceRecordSets`.
#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
#[doc(hidden)]
pub struct ListResourceRecordSets;
impl ListResourceRecordSets {
    #[doc(hidden)]
    pub fn new() -> Self {
        Self
    }
}
impl ::aws_smithy_http::response::ParseStrictResponse for ListResourceRecordSets {
                type Output = ::std::result::Result<crate::operation::list_resource_record_sets::ListResourceRecordSetsOutput, crate::operation::list_resource_record_sets::ListResourceRecordSetsError>;
                fn parse(&self, response: &::http::Response<::bytes::Bytes>) -> Self::Output {
                     let (success, status) = (response.status().is_success(), response.status().as_u16());
                     let headers = response.headers();
                     let body = response.body().as_ref();
                     ::tracing::debug!(request_id = ?::aws_http::request_id::RequestId::request_id(response));
                     if !success && status != 200 {
                        crate::protocol_serde::shape_list_resource_record_sets::de_list_resource_record_sets_http_error(status, headers, body)
                     } else {
                        crate::protocol_serde::shape_list_resource_record_sets::de_list_resource_record_sets_http_response_with_props(status, headers, body)
                     }
                }
                
            }
#[allow(unreachable_code, unused_variables)]
#[cfg(test)]
mod list_resource_record_sets_request_test {
    /// This test validates that hosted zone is correctly trimmed
    /// Test ID: ListResourceRecordSetsTrimHostedZone
    #[::tokio::test]
    #[allow(unused_mut)]
    async fn list_resource_record_sets_trim_hosted_zone_request() {
        let (conn, request_receiver) = ::aws_smithy_client::test_connection::capture_request(None);
                    let config_builder = crate::config::Config::builder().with_test_defaults().endpoint_resolver("https://example.com");
                    let config_builder = config_builder.region(::aws_types::region::Region::new("us-east-1"));
        let mut config_builder = config_builder;
        // If the test case was missing endpoint parameters, default a region so it doesn't fail
                            if config_builder.region.is_none() {
                                config_builder.set_region(Some(crate::config::Region::new("us-east-1")));
                            }
        let config = config_builder.http_connector(conn).build();
                        let client = crate::Client::from_conf(config);
        let result = client.list_resource_record_sets()
        .set_hosted_zone_id(
            ::std::option::Option::Some(
                "/hostedzone/IDOFMYHOSTEDZONE".to_owned()
            )
        )
        .send().await;
        let _ = dbg!(result);
        let http_request = request_receiver.expect_request();
        ::pretty_assertions::assert_eq!(http_request.method(), "GET");
                        ::pretty_assertions::assert_eq!(http_request.uri().path(), "/2013-04-01/hostedzone/IDOFMYHOSTEDZONE/rrset");
    }
    
    
}

/// Do not use this.
            ///
            /// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
            #[deprecated(note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).")]
            pub type ListResourceRecordSetsErrorKind = ListResourceRecordSetsError;
/// Error type for the `ListResourceRecordSetsError` operation.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum ListResourceRecordSetsError {
    /// <p>The input is not valid.</p>
    InvalidInput(crate::types::error::InvalidInput),
    /// <p>No hosted zone exists with the ID that you specified.</p>
    NoSuchHostedZone(crate::types::error::NoSuchHostedZone),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
                    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::aws_smithy_http::result::CreateUnhandledError for ListResourceRecordSetsError {
    fn create_unhandled_error(
                        source: ::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>,
                        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>
                    ) -> Self {
        Self::Unhandled({
                                let mut builder = ::aws_smithy_types::error::Unhandled::builder().source(source);
                                builder.set_meta(meta);
                                builder.build()
                            })
    }
}
impl ::std::fmt::Display for ListResourceRecordSetsError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::InvalidInput(_inner) =>
            _inner.fmt(f)
            ,
            Self::NoSuchHostedZone(_inner) =>
            _inner.fmt(f)
            ,
            Self::Unhandled(_inner) => {
                _inner.fmt(f)
            }
        }
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for ListResourceRecordSetsError {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::InvalidInput(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::NoSuchHostedZone(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::Unhandled(_inner) => {
                ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl ::aws_http::request_id::RequestId for crate::operation::list_resource_record_sets::ListResourceRecordSetsError {
                            fn request_id(&self) -> Option<&str> {
                                self.meta().request_id()
                            }
                        }
impl ::aws_smithy_types::retry::ProvideErrorKind for ListResourceRecordSetsError {
    fn code(&self) -> ::std::option::Option<&str> {
        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
        ::std::option::Option::None
    }
}
impl ListResourceRecordSetsError {
    /// Creates the `ListResourceRecordSetsError::Unhandled` variant from any error type.
                    pub fn unhandled(err: impl ::std::convert::Into<::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>>) -> Self {
                        Self::Unhandled(::aws_smithy_types::error::Unhandled::builder().source(err).build())
                    }
    
                    /// Creates the `ListResourceRecordSetsError::Unhandled` variant from a `::aws_smithy_types::error::ErrorMetadata`.
                    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
                        Self::Unhandled(::aws_smithy_types::error::Unhandled::builder().source(err.clone()).meta(err).build())
                    }
    /// 
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    /// 
    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::InvalidInput(e) => e.meta(),
            Self::NoSuchHostedZone(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `ListResourceRecordSetsError::InvalidInput`.
    pub fn is_invalid_input(&self) -> bool {
        matches!(self, Self::InvalidInput(_))
    }
    /// Returns `true` if the error kind is `ListResourceRecordSetsError::NoSuchHostedZone`.
    pub fn is_no_such_hosted_zone(&self) -> bool {
        matches!(self, Self::NoSuchHostedZone(_))
    }
}
impl ::std::error::Error for ListResourceRecordSetsError {
    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Self::InvalidInput(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::NoSuchHostedZone(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::Unhandled(_inner) => {
                ::std::option::Option::Some(_inner)
            }
        }
    }
}

pub use crate::operation::list_resource_record_sets::_list_resource_record_sets_output::ListResourceRecordSetsOutput;

pub use crate::operation::list_resource_record_sets::_list_resource_record_sets_input::ListResourceRecordSetsInput;

mod _list_resource_record_sets_input;

mod _list_resource_record_sets_output;

/// Builders
pub mod builders;

