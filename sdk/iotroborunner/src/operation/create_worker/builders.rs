// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_worker::_create_worker_output::CreateWorkerOutputBuilder;

pub use crate::operation::create_worker::_create_worker_input::CreateWorkerInputBuilder;

impl CreateWorkerInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::create_worker::CreateWorkerOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::create_worker::CreateWorkerError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.create_worker();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `CreateWorker`.
/// 
/// Grants permission to create a worker
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateWorkerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::create_worker::builders::CreateWorkerInputBuilder,
}
impl CreateWorkerFluentBuilder  {
    /// Creates a new `CreateWorker`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the CreateWorker as a reference.
    pub fn as_input(&self) -> &crate::operation::create_worker::builders::CreateWorkerInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::create_worker::CreateWorker, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::create_worker::CreateWorkerError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::create_worker::CreateWorkerOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_worker::CreateWorkerError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::create_worker::CreateWorkerOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_worker::CreateWorkerError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::create_worker::CreateWorker, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::create_worker::CreateWorkerError>
                            >  {
                                self.customize_middleware().await
                            }
    /// Token used for detecting replayed requests. Replayed requests will not be performed multiple times.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// Token used for detecting replayed requests. Replayed requests will not be performed multiple times.
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// Token used for detecting replayed requests. Replayed requests will not be performed multiple times.
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// Human friendly name of the resource.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// Human friendly name of the resource.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Human friendly name of the resource.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// Full ARN of the worker fleet.
    pub fn fleet(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.fleet(input.into());
        self
    }
    /// Full ARN of the worker fleet.
    pub fn set_fleet(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_fleet(input);
        self
    }
    /// Full ARN of the worker fleet.
    pub fn get_fleet(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_fleet()
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn additional_transient_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.additional_transient_properties(input.into());
        self
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn set_additional_transient_properties(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_additional_transient_properties(input);
        self
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn get_additional_transient_properties(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_additional_transient_properties()
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn additional_fixed_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.additional_fixed_properties(input.into());
        self
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn set_additional_fixed_properties(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_additional_fixed_properties(input);
        self
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn get_additional_fixed_properties(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_additional_fixed_properties()
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn vendor_properties(mut self, input: crate::types::VendorProperties) -> Self {
        self.inner = self.inner.vendor_properties(input);
        self
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn set_vendor_properties(mut self, input: ::std::option::Option<crate::types::VendorProperties>) -> Self {
        self.inner = self.inner.set_vendor_properties(input);
        self
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn get_vendor_properties(&self) -> &::std::option::Option<crate::types::VendorProperties> {
        self.inner.get_vendor_properties()
    }
    /// Supported coordinates for worker position.
    pub fn position(mut self, input: crate::types::PositionCoordinates) -> Self {
        self.inner = self.inner.position(input);
        self
    }
    /// Supported coordinates for worker position.
    pub fn set_position(mut self, input: ::std::option::Option<crate::types::PositionCoordinates>) -> Self {
        self.inner = self.inner.set_position(input);
        self
    }
    /// Supported coordinates for worker position.
    pub fn get_position(&self) -> &::std::option::Option<crate::types::PositionCoordinates> {
        self.inner.get_position()
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn orientation(mut self, input: crate::types::Orientation) -> Self {
        self.inner = self.inner.orientation(input);
        self
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn set_orientation(mut self, input: ::std::option::Option<crate::types::Orientation>) -> Self {
        self.inner = self.inner.set_orientation(input);
        self
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn get_orientation(&self) -> &::std::option::Option<crate::types::Orientation> {
        self.inner.get_orientation()
    }
}

