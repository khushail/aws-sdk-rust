// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_routing_control::_update_routing_control_output::UpdateRoutingControlOutputBuilder;

pub use crate::operation::update_routing_control::_update_routing_control_input::UpdateRoutingControlInputBuilder;

impl UpdateRoutingControlInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::update_routing_control::UpdateRoutingControlOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::update_routing_control::UpdateRoutingControlError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.update_routing_control();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `UpdateRoutingControl`.
/// 
/// <p>Updates a routing control. You can only update the name of the routing control. To get or update the routing control state, see the Recovery Cluster (data plane) API actions for Amazon Route 53 Application Recovery Controller.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateRoutingControlFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::update_routing_control::builders::UpdateRoutingControlInputBuilder,
}
impl UpdateRoutingControlFluentBuilder  {
    /// Creates a new `UpdateRoutingControl`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the UpdateRoutingControl as a reference.
    pub fn as_input(&self) -> &crate::operation::update_routing_control::builders::UpdateRoutingControlInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::update_routing_control::UpdateRoutingControl, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::update_routing_control::UpdateRoutingControlError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::update_routing_control::UpdateRoutingControlOutput, ::aws_smithy_http::result::SdkError<crate::operation::update_routing_control::UpdateRoutingControlError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::update_routing_control::UpdateRoutingControlOutput, ::aws_smithy_http::result::SdkError<crate::operation::update_routing_control::UpdateRoutingControlError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::update_routing_control::UpdateRoutingControl, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::update_routing_control::UpdateRoutingControlError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The Amazon Resource Name (ARN) of the routing control.</p>
    pub fn routing_control_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.routing_control_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the routing control.</p>
    pub fn set_routing_control_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_routing_control_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the routing control.</p>
    pub fn get_routing_control_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_routing_control_arn()
    }
    /// <p>The name of the routing control.</p>
    pub fn routing_control_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.routing_control_name(input.into());
        self
    }
    /// <p>The name of the routing control.</p>
    pub fn set_routing_control_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_routing_control_name(input);
        self
    }
    /// <p>The name of the routing control.</p>
    pub fn get_routing_control_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_routing_control_name()
    }
}

