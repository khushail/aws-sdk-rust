// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_to_work_mail::_register_to_work_mail_output::RegisterToWorkMailOutputBuilder;

pub use crate::operation::register_to_work_mail::_register_to_work_mail_input::RegisterToWorkMailInputBuilder;

impl RegisterToWorkMailInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::register_to_work_mail::RegisterToWorkMailOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::register_to_work_mail::RegisterToWorkMailError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.register_to_work_mail();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `RegisterToWorkMail`.
/// 
/// <p>Registers an existing and disabled user, group, or resource for WorkMail use by associating a mailbox and calendaring capabilities. It performs no change if the user, group, or resource is enabled and fails if the user, group, or resource is deleted. This operation results in the accumulation of costs. For more information, see <a href="https://aws.amazon.com/workmail/pricing">Pricing</a>. The equivalent console functionality for this operation is <i>Enable</i>.</p> 
/// <p>Users can either be created by calling the <code>CreateUser</code> API operation or they can be synchronized from your directory. For more information, see <code>DeregisterFromWorkMail</code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RegisterToWorkMailFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::register_to_work_mail::builders::RegisterToWorkMailInputBuilder,
}
impl RegisterToWorkMailFluentBuilder  {
    /// Creates a new `RegisterToWorkMail`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the RegisterToWorkMail as a reference.
    pub fn as_input(&self) -> &crate::operation::register_to_work_mail::builders::RegisterToWorkMailInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::register_to_work_mail::RegisterToWorkMail, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::register_to_work_mail::RegisterToWorkMailError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::register_to_work_mail::RegisterToWorkMailOutput, ::aws_smithy_http::result::SdkError<crate::operation::register_to_work_mail::RegisterToWorkMailError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::register_to_work_mail::RegisterToWorkMailOutput, ::aws_smithy_http::result::SdkError<crate::operation::register_to_work_mail::RegisterToWorkMailError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::register_to_work_mail::RegisterToWorkMail, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::register_to_work_mail::RegisterToWorkMailError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The identifier for the organization under which the user, group, or resource exists.</p>
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.organization_id(input.into());
        self
    }
    /// <p>The identifier for the organization under which the user, group, or resource exists.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_organization_id(input);
        self
    }
    /// <p>The identifier for the organization under which the user, group, or resource exists.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_organization_id()
    }
    /// <p>The identifier for the user, group, or resource to be updated.</p>
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.entity_id(input.into());
        self
    }
    /// <p>The identifier for the user, group, or resource to be updated.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_entity_id(input);
        self
    }
    /// <p>The identifier for the user, group, or resource to be updated.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_entity_id()
    }
    /// <p>The email for the user, group, or resource to be updated.</p>
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.email(input.into());
        self
    }
    /// <p>The email for the user, group, or resource to be updated.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_email(input);
        self
    }
    /// <p>The email for the user, group, or resource to be updated.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_email()
    }
}

