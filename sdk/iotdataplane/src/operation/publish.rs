// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

impl PublishInput {
    /// Consumes the builder and constructs an Operation<[`Publish`](crate::operation::publish::Publish)>
    #[allow(unused_mut)]
    #[allow(clippy::let_and_return)]
    #[allow(clippy::needless_borrow)]
    pub async fn make_operation(self, _config: &crate::config::Config) -> ::std::result::Result<::aws_smithy_http::operation::Operation<crate::operation::publish::Publish, ::aws_http::retry::AwsResponseRetryClassifier>, ::aws_smithy_http::operation::error::BuildError> {
        assert_ne!(_config.retry_config().map(|rc| rc.mode()), ::std::option::Option::Some(::aws_smithy_types::retry::RetryMode::Adaptive), "Adaptive retry mode is unsupported, please use Standard mode or disable retries.");
        use ::aws_smithy_http::endpoint::ResolveEndpoint;
                                let params_result = crate::endpoint::Params::builder().set_region(_config.region.as_ref().map(|r|r.as_ref().to_owned()))
        .set_use_dual_stack(_config.use_dual_stack)
        .set_use_fips(_config.use_fips)
        .set_endpoint(_config.endpoint_url
        .clone()).build()
                                    .map_err(|err| ::aws_smithy_http::endpoint::ResolveEndpointError::from_source("could not construct endpoint parameters", err));
                                let (endpoint_result, params) = match params_result {
                                    ::std::result::Result::Ok(params) => (_config.endpoint_resolver.resolve_endpoint(&params), ::std::option::Option::Some(params)),
                                    ::std::result::Result::Err(e) => (::std::result::Result::Err(e), ::std::option::Option::None)
                                };
        let mut request = {
            fn uri_base(_input: &crate::operation::publish::PublishInput, output: &mut ::std::string::String) -> ::std::result::Result<(), ::aws_smithy_http::operation::error::BuildError> {
                use ::std::fmt::Write as _;
                let input_1 = &_input.topic;
                let input_1 = input_1.as_ref().ok_or_else(|| ::aws_smithy_http::operation::error::BuildError::missing_field("topic", "cannot be empty or unset"))?;
                let topic = ::aws_smithy_http::label::fmt_string(input_1, ::aws_smithy_http::label::EncodingStrategy::Default);
                if topic.is_empty() {
                                return ::std::result::Result::Err(::aws_smithy_http::operation::error::BuildError::missing_field("topic", "cannot be empty or unset"))
                            }
                ::std::write!(output, "/topics/{topic}", topic = topic).expect("formatting should succeed");
                ::std::result::Result::Ok(())
            }
            fn uri_query(_input: &crate::operation::publish::PublishInput, mut output: &mut ::std::string::String) -> ::std::result::Result<(), ::aws_smithy_http::operation::error::BuildError> {
                let mut query = ::aws_smithy_http::query::Writer::new(output);
                if let ::std::option::Option::Some(inner_2) = &_input.qos {
                    if *inner_2 != 0 {
                        query.push_kv("qos", ::aws_smithy_types::primitive::Encoder::from(*inner_2).encode());
                    }
                }
                if let ::std::option::Option::Some(inner_3) = &_input.retain {
                    if *inner_3 {
                        query.push_kv("retain", ::aws_smithy_types::primitive::Encoder::from(*inner_3).encode());
                    }
                }
                if let ::std::option::Option::Some(inner_4) = &_input.content_type {
                     {
                        query.push_kv("contentType", &::aws_smithy_http::query::fmt_string(&inner_4));
                    }
                }
                if let ::std::option::Option::Some(inner_5) = &_input.response_topic {
                     {
                        query.push_kv("responseTopic", &::aws_smithy_http::query::fmt_string(&inner_5));
                    }
                }
                if let ::std::option::Option::Some(inner_6) = &_input.message_expiry {
                    if *inner_6 != 0 {
                        query.push_kv("messageExpiry", ::aws_smithy_types::primitive::Encoder::from(*inner_6).encode());
                    }
                }
                ::std::result::Result::Ok(())
            }
            #[allow(clippy::unnecessary_wraps)]
            fn update_http_builder(
                            input: &crate::operation::publish::PublishInput,
                            builder: ::http::request::Builder
                        ) -> ::std::result::Result<::http::request::Builder, ::aws_smithy_http::operation::error::BuildError> {
                let mut uri = ::std::string::String::new();
                uri_base(input, &mut uri)?;
                uri_query(input, &mut uri)?;
                let builder = crate::protocol_serde::shape_publish::ser_publish_headers(input, builder)?;
                ::std::result::Result::Ok(builder.method("POST").uri(uri))
            }
            let mut builder = update_http_builder(&self, ::http::request::Builder::new())?;
            builder = ::aws_smithy_http::header::set_request_header_if_absent(builder, ::http::header::CONTENT_TYPE, "application/octet-stream");
            builder
        };
        let mut properties = ::aws_smithy_http::property_bag::SharedPropertyBag::new();
        #[allow(clippy::useless_conversion)]
        let body = ::aws_smithy_http::body::SdkBody::from(
            crate::protocol_serde::shape_publish_input::ser_payload_http_payload( self.payload)?
        );
        if let ::std::option::Option::Some(content_length) = body.content_length() {
                                request = ::aws_smithy_http::header::set_request_header_if_absent(request, ::http::header::CONTENT_LENGTH, content_length);
                            }
        let request = request.body(body).expect("should be valid request");
        let mut request = ::aws_smithy_http::operation::Request::from_parts(request, properties);
        request.properties_mut().insert(endpoint_result);
        if let ::std::option::Option::Some(params) = params { request.properties_mut().insert(params); }
        request.properties_mut().insert(::aws_smithy_http::http_versions::DEFAULT_HTTP_VERSION_LIST.clone());
        request.properties_mut().insert(_config.time_source.clone());
        let mut user_agent = ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                                ::aws_types::os_shim_internal::Env::real(),
                                crate::meta::API_METADATA.clone(),
                            );
                            if let Some(app_name) = _config.app_name() {
                                user_agent = user_agent.with_app_name(app_name.clone());
                            }
                            request.properties_mut().insert(user_agent);
        let mut signing_config = ::aws_sig_auth::signer::OperationSigningConfig::default_config();
        request.properties_mut().insert(signing_config);
                            request.properties_mut().insert(::aws_types::SigningService::from_static(_config.signing_service()));
                            if let Some(region) = &_config.region {
                                request.properties_mut().insert(::aws_types::region::SigningRegion::from(region.clone()));
                            }
        if let Some(region) = &_config.region {
                                request.properties_mut().insert(region.clone());
                            }
        ::aws_http::auth::set_credentials_cache(&mut request.properties_mut(), _config.credentials_cache.clone());
        let op = ::aws_smithy_http::operation::Operation::new(request, crate::operation::publish::Publish::new())
                            .with_metadata(::aws_smithy_http::operation::Metadata::new("Publish", "iotdataplane"));
        let op = op.with_retry_classifier(::aws_http::retry::AwsResponseRetryClassifier::new());
        ::std::result::Result::Ok(op)
    }
}
/// Orchestration and serialization glue logic for `Publish`.
#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
#[doc(hidden)]
pub struct Publish;
impl Publish {
    #[doc(hidden)]
    pub fn new() -> Self {
        Self
    }
}
impl ::aws_smithy_http::response::ParseStrictResponse for Publish {
                type Output = ::std::result::Result<crate::operation::publish::PublishOutput, crate::operation::publish::PublishError>;
                fn parse(&self, response: &::http::Response<::bytes::Bytes>) -> Self::Output {
                     let (success, status) = (response.status().is_success(), response.status().as_u16());
                     let headers = response.headers();
                     let body = response.body().as_ref();
                     ::tracing::debug!(request_id = ?::aws_http::request_id::RequestId::request_id(response));
                     if !success && status != 200 {
                        crate::protocol_serde::shape_publish::de_publish_http_error(status, headers, body)
                     } else {
                        crate::protocol_serde::shape_publish::de_publish_http_response_with_props(status, headers, body)
                     }
                }
                
            }

/// Do not use this.
            ///
            /// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
            #[deprecated(note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).")]
            pub type PublishErrorKind = PublishError;
/// Error type for the `PublishError` operation.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum PublishError {
    /// <p>An unexpected error has occurred.</p>
    InternalFailureException(crate::types::error::InternalFailureException),
    /// <p>The request is not valid.</p>
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// <p>The specified combination of HTTP verb and URI is not supported.</p>
    MethodNotAllowedException(crate::types::error::MethodNotAllowedException),
    /// <p>The rate exceeds the limit.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>You are not authorized to perform this operation.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
                    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::aws_smithy_http::result::CreateUnhandledError for PublishError {
    fn create_unhandled_error(
                        source: ::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>,
                        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>
                    ) -> Self {
        Self::Unhandled({
                                let mut builder = ::aws_smithy_types::error::Unhandled::builder().source(source);
                                builder.set_meta(meta);
                                builder.build()
                            })
    }
}
impl ::std::fmt::Display for PublishError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::InternalFailureException(_inner) =>
            _inner.fmt(f)
            ,
            Self::InvalidRequestException(_inner) =>
            _inner.fmt(f)
            ,
            Self::MethodNotAllowedException(_inner) =>
            _inner.fmt(f)
            ,
            Self::ThrottlingException(_inner) =>
            _inner.fmt(f)
            ,
            Self::UnauthorizedException(_inner) =>
            _inner.fmt(f)
            ,
            Self::Unhandled(_inner) => {
                _inner.fmt(f)
            }
        }
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for PublishError {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::InternalFailureException(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::InvalidRequestException(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::MethodNotAllowedException(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::ThrottlingException(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::UnauthorizedException(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::Unhandled(_inner) => {
                ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl ::aws_http::request_id::RequestId for crate::operation::publish::PublishError {
                            fn request_id(&self) -> Option<&str> {
                                self.meta().request_id()
                            }
                        }
impl ::aws_smithy_types::retry::ProvideErrorKind for PublishError {
    fn code(&self) -> ::std::option::Option<&str> {
        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
        ::std::option::Option::None
    }
}
impl PublishError {
    /// Creates the `PublishError::Unhandled` variant from any error type.
                    pub fn unhandled(err: impl ::std::convert::Into<::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>>) -> Self {
                        Self::Unhandled(::aws_smithy_types::error::Unhandled::builder().source(err).build())
                    }
    
                    /// Creates the `PublishError::Unhandled` variant from a `::aws_smithy_types::error::ErrorMetadata`.
                    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
                        Self::Unhandled(::aws_smithy_types::error::Unhandled::builder().source(err.clone()).meta(err).build())
                    }
    /// 
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    /// 
    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::InternalFailureException(e) => e.meta(),
            Self::InvalidRequestException(e) => e.meta(),
            Self::MethodNotAllowedException(e) => e.meta(),
            Self::ThrottlingException(e) => e.meta(),
            Self::UnauthorizedException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `PublishError::InternalFailureException`.
    pub fn is_internal_failure_exception(&self) -> bool {
        matches!(self, Self::InternalFailureException(_))
    }
    /// Returns `true` if the error kind is `PublishError::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(self, Self::InvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `PublishError::MethodNotAllowedException`.
    pub fn is_method_not_allowed_exception(&self) -> bool {
        matches!(self, Self::MethodNotAllowedException(_))
    }
    /// Returns `true` if the error kind is `PublishError::ThrottlingException`.
    pub fn is_throttling_exception(&self) -> bool {
        matches!(self, Self::ThrottlingException(_))
    }
    /// Returns `true` if the error kind is `PublishError::UnauthorizedException`.
    pub fn is_unauthorized_exception(&self) -> bool {
        matches!(self, Self::UnauthorizedException(_))
    }
}
impl ::std::error::Error for PublishError {
    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Self::InternalFailureException(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::InvalidRequestException(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::MethodNotAllowedException(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::ThrottlingException(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::UnauthorizedException(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::Unhandled(_inner) => {
                ::std::option::Option::Some(_inner)
            }
        }
    }
}

pub use crate::operation::publish::_publish_output::PublishOutput;

pub use crate::operation::publish::_publish_input::PublishInput;

mod _publish_input;

mod _publish_output;

/// Builders
pub mod builders;

