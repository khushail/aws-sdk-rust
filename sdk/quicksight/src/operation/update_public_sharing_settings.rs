// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

impl UpdatePublicSharingSettingsInput {
    /// Consumes the builder and constructs an Operation<[`UpdatePublicSharingSettings`](crate::operation::update_public_sharing_settings::UpdatePublicSharingSettings)>
    #[allow(unused_mut)]
    #[allow(clippy::let_and_return)]
    #[allow(clippy::needless_borrow)]
    pub async fn make_operation(&self, _config: &crate::config::Config) -> ::std::result::Result<::aws_smithy_http::operation::Operation<crate::operation::update_public_sharing_settings::UpdatePublicSharingSettings, ::aws_http::retry::AwsResponseRetryClassifier>, ::aws_smithy_http::operation::error::BuildError> {
        assert_ne!(_config.retry_config().map(|rc| rc.mode()), ::std::option::Option::Some(::aws_smithy_types::retry::RetryMode::Adaptive), "Adaptive retry mode is unsupported, please use Standard mode or disable retries.");
        use ::aws_smithy_http::endpoint::ResolveEndpoint;
                                let params_result = crate::endpoint::Params::builder().set_region(_config.region.as_ref().map(|r|r.as_ref().to_owned()))
        .set_use_dual_stack(_config.use_dual_stack)
        .set_use_fips(_config.use_fips)
        .set_endpoint(_config.endpoint_url
        .clone()).build()
                                    .map_err(|err| ::aws_smithy_http::endpoint::ResolveEndpointError::from_source("could not construct endpoint parameters", err));
                                let (endpoint_result, params) = match params_result {
                                    ::std::result::Result::Ok(params) => (_config.endpoint_resolver.resolve_endpoint(&params), ::std::option::Option::Some(params)),
                                    ::std::result::Result::Err(e) => (::std::result::Result::Err(e), ::std::option::Option::None)
                                };
        let mut request = {
            fn uri_base(_input: &crate::operation::update_public_sharing_settings::UpdatePublicSharingSettingsInput, output: &mut ::std::string::String) -> ::std::result::Result<(), ::aws_smithy_http::operation::error::BuildError> {
                use ::std::fmt::Write as _;
                let input_1 = &_input.aws_account_id;
                let input_1 = input_1.as_ref().ok_or_else(|| ::aws_smithy_http::operation::error::BuildError::missing_field("aws_account_id", "cannot be empty or unset"))?;
                let aws_account_id = ::aws_smithy_http::label::fmt_string(input_1, ::aws_smithy_http::label::EncodingStrategy::Default);
                if aws_account_id.is_empty() {
                                return ::std::result::Result::Err(::aws_smithy_http::operation::error::BuildError::missing_field("aws_account_id", "cannot be empty or unset"))
                            }
                ::std::write!(output, "/accounts/{AwsAccountId}/public-sharing-settings", AwsAccountId = aws_account_id).expect("formatting should succeed");
                ::std::result::Result::Ok(())
            }
            #[allow(clippy::unnecessary_wraps)]
            fn update_http_builder(
                            input: &crate::operation::update_public_sharing_settings::UpdatePublicSharingSettingsInput,
                            builder: ::http::request::Builder
                        ) -> ::std::result::Result<::http::request::Builder, ::aws_smithy_http::operation::error::BuildError> {
                let mut uri = ::std::string::String::new();
                uri_base(input, &mut uri)?;
                ::std::result::Result::Ok(builder.method("PUT").uri(uri))
            }
            let mut builder = update_http_builder(&self, ::http::request::Builder::new())?;
            builder = ::aws_smithy_http::header::set_request_header_if_absent(builder, ::http::header::CONTENT_TYPE, "application/json");
            builder
        };
        let mut properties = ::aws_smithy_http::property_bag::SharedPropertyBag::new();
        #[allow(clippy::useless_conversion)]
        let body = ::aws_smithy_http::body::SdkBody::from(
            crate::protocol_serde::shape_update_public_sharing_settings::ser_update_public_sharing_settings_input(&self)?
        );
        if let ::std::option::Option::Some(content_length) = body.content_length() {
                                request = ::aws_smithy_http::header::set_request_header_if_absent(request, ::http::header::CONTENT_LENGTH, content_length);
                            }
        let request = request.body(body).expect("should be valid request");
        let mut request = ::aws_smithy_http::operation::Request::from_parts(request, properties);
        request.properties_mut().insert(endpoint_result);
        if let ::std::option::Option::Some(params) = params { request.properties_mut().insert(params); }
        request.properties_mut().insert(::aws_smithy_http::http_versions::DEFAULT_HTTP_VERSION_LIST.clone());
        request.properties_mut().insert(_config.time_source.clone());
        let mut user_agent = ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                                ::aws_types::os_shim_internal::Env::real(),
                                crate::meta::API_METADATA.clone(),
                            );
                            if let Some(app_name) = _config.app_name() {
                                user_agent = user_agent.with_app_name(app_name.clone());
                            }
                            request.properties_mut().insert(user_agent);
        let mut signing_config = ::aws_sig_auth::signer::OperationSigningConfig::default_config();
        request.properties_mut().insert(signing_config);
                            request.properties_mut().insert(::aws_types::SigningService::from_static(_config.signing_service()));
                            if let Some(region) = &_config.region {
                                request.properties_mut().insert(::aws_types::region::SigningRegion::from(region.clone()));
                            }
        if let Some(region) = &_config.region {
                                request.properties_mut().insert(region.clone());
                            }
        ::aws_http::auth::set_credentials_cache(&mut request.properties_mut(), _config.credentials_cache.clone());
        let op = ::aws_smithy_http::operation::Operation::new(request, crate::operation::update_public_sharing_settings::UpdatePublicSharingSettings::new())
                            .with_metadata(::aws_smithy_http::operation::Metadata::new("UpdatePublicSharingSettings", "quicksight"));
        let op = op.with_retry_classifier(::aws_http::retry::AwsResponseRetryClassifier::new());
        ::std::result::Result::Ok(op)
    }
}
/// Orchestration and serialization glue logic for `UpdatePublicSharingSettings`.
#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
#[doc(hidden)]
pub struct UpdatePublicSharingSettings;
impl UpdatePublicSharingSettings {
    #[doc(hidden)]
    pub fn new() -> Self {
        Self
    }
}
impl ::aws_smithy_http::response::ParseStrictResponse for UpdatePublicSharingSettings {
                type Output = ::std::result::Result<crate::operation::update_public_sharing_settings::UpdatePublicSharingSettingsOutput, crate::operation::update_public_sharing_settings::UpdatePublicSharingSettingsError>;
                fn parse(&self, response: &::http::Response<::bytes::Bytes>) -> Self::Output {
                     let (success, status) = (response.status().is_success(), response.status().as_u16());
                     let headers = response.headers();
                     let body = response.body().as_ref();
                     ::tracing::debug!(request_id = ?::aws_http::request_id::RequestId::request_id(response));
                     if !success && status != 200 {
                        crate::protocol_serde::shape_update_public_sharing_settings::de_update_public_sharing_settings_http_error(status, headers, body)
                     } else {
                        crate::protocol_serde::shape_update_public_sharing_settings::de_update_public_sharing_settings_http_response_with_props(status, headers, body)
                     }
                }
                
            }

/// Do not use this.
            ///
            /// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
            #[deprecated(note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).")]
            pub type UpdatePublicSharingSettingsErrorKind = UpdatePublicSharingSettingsError;
/// Error type for the `UpdatePublicSharingSettingsError` operation.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum UpdatePublicSharingSettingsError {
    /// <p>You don't have access to this item. The provided credentials couldn't be validated. You might not be authorized to carry out the request. Make sure that your account is authorized to use the Amazon QuickSight service, that your policies have the correct permissions, and that you are using the correct credentials.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>An internal failure occurred.</p>
    InternalFailureException(crate::types::error::InternalFailureException),
    /// <p>One or more parameters has a value that isn't valid.</p>
    InvalidParameterValueException(crate::types::error::InvalidParameterValueException),
    /// <p>One or more resources can't be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Access is throttled.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>This error indicates that you are calling an embedding operation in Amazon QuickSight without the required pricing plan on your Amazon Web Services account. Before you can use embedding for anonymous users, a QuickSight administrator needs to add capacity pricing to Amazon QuickSight. You can do this on the <b>Manage Amazon QuickSight</b> page. </p> 
    /// <p>After capacity pricing is added, you can use the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GetDashboardEmbedUrl.html">GetDashboardEmbedUrl</a> </code> API operation with the <code>--identity-type ANONYMOUS</code> option.</p>
    UnsupportedPricingPlanException(crate::types::error::UnsupportedPricingPlanException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
                    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::aws_smithy_http::result::CreateUnhandledError for UpdatePublicSharingSettingsError {
    fn create_unhandled_error(
                        source: ::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>,
                        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>
                    ) -> Self {
        Self::Unhandled({
                                let mut builder = ::aws_smithy_types::error::Unhandled::builder().source(source);
                                builder.set_meta(meta);
                                builder.build()
                            })
    }
}
impl ::std::fmt::Display for UpdatePublicSharingSettingsError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::AccessDeniedException(_inner) =>
            _inner.fmt(f)
            ,
            Self::InternalFailureException(_inner) =>
            _inner.fmt(f)
            ,
            Self::InvalidParameterValueException(_inner) =>
            _inner.fmt(f)
            ,
            Self::ResourceNotFoundException(_inner) =>
            _inner.fmt(f)
            ,
            Self::ThrottlingException(_inner) =>
            _inner.fmt(f)
            ,
            Self::UnsupportedPricingPlanException(_inner) =>
            _inner.fmt(f)
            ,
            Self::Unhandled(_inner) => {
                _inner.fmt(f)
            }
        }
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for UpdatePublicSharingSettingsError {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::AccessDeniedException(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::InternalFailureException(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::InvalidParameterValueException(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::ResourceNotFoundException(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::ThrottlingException(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::UnsupportedPricingPlanException(_inner) =>
            ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            ,
            Self::Unhandled(_inner) => {
                ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl ::aws_http::request_id::RequestId for crate::operation::update_public_sharing_settings::UpdatePublicSharingSettingsError {
                            fn request_id(&self) -> Option<&str> {
                                self.meta().request_id()
                            }
                        }
impl ::aws_smithy_types::retry::ProvideErrorKind for UpdatePublicSharingSettingsError {
    fn code(&self) -> ::std::option::Option<&str> {
        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
        ::std::option::Option::None
    }
}
impl UpdatePublicSharingSettingsError {
    /// Creates the `UpdatePublicSharingSettingsError::Unhandled` variant from any error type.
                    pub fn unhandled(err: impl ::std::convert::Into<::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>>) -> Self {
                        Self::Unhandled(::aws_smithy_types::error::Unhandled::builder().source(err).build())
                    }
    
                    /// Creates the `UpdatePublicSharingSettingsError::Unhandled` variant from a `::aws_smithy_types::error::ErrorMetadata`.
                    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
                        Self::Unhandled(::aws_smithy_types::error::Unhandled::builder().source(err.clone()).meta(err).build())
                    }
    /// 
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    /// 
    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::AccessDeniedException(e) => e.meta(),
            Self::InternalFailureException(e) => e.meta(),
            Self::InvalidParameterValueException(e) => e.meta(),
            Self::ResourceNotFoundException(e) => e.meta(),
            Self::ThrottlingException(e) => e.meta(),
            Self::UnsupportedPricingPlanException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `UpdatePublicSharingSettingsError::AccessDeniedException`.
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(self, Self::AccessDeniedException(_))
    }
    /// Returns `true` if the error kind is `UpdatePublicSharingSettingsError::InternalFailureException`.
    pub fn is_internal_failure_exception(&self) -> bool {
        matches!(self, Self::InternalFailureException(_))
    }
    /// Returns `true` if the error kind is `UpdatePublicSharingSettingsError::InvalidParameterValueException`.
    pub fn is_invalid_parameter_value_exception(&self) -> bool {
        matches!(self, Self::InvalidParameterValueException(_))
    }
    /// Returns `true` if the error kind is `UpdatePublicSharingSettingsError::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(self, Self::ResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `UpdatePublicSharingSettingsError::ThrottlingException`.
    pub fn is_throttling_exception(&self) -> bool {
        matches!(self, Self::ThrottlingException(_))
    }
    /// Returns `true` if the error kind is `UpdatePublicSharingSettingsError::UnsupportedPricingPlanException`.
    pub fn is_unsupported_pricing_plan_exception(&self) -> bool {
        matches!(self, Self::UnsupportedPricingPlanException(_))
    }
}
impl ::std::error::Error for UpdatePublicSharingSettingsError {
    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Self::AccessDeniedException(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::InternalFailureException(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::InvalidParameterValueException(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::ResourceNotFoundException(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::ThrottlingException(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::UnsupportedPricingPlanException(_inner) =>
            ::std::option::Option::Some(_inner)
            ,
            Self::Unhandled(_inner) => {
                ::std::option::Option::Some(_inner)
            }
        }
    }
}

pub use crate::operation::update_public_sharing_settings::_update_public_sharing_settings_output::UpdatePublicSharingSettingsOutput;

pub use crate::operation::update_public_sharing_settings::_update_public_sharing_settings_input::UpdatePublicSharingSettingsInput;

mod _update_public_sharing_settings_input;

mod _update_public_sharing_settings_output;

/// Builders
pub mod builders;

