// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_email_identity::_create_email_identity_output::CreateEmailIdentityOutputBuilder;

pub use crate::operation::create_email_identity::_create_email_identity_input::CreateEmailIdentityInputBuilder;

impl CreateEmailIdentityInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::create_email_identity::CreateEmailIdentityOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::create_email_identity::CreateEmailIdentityError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.create_email_identity();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `CreateEmailIdentity`.
/// 
/// <p>Verifies an email identity for use with Amazon Pinpoint. In Amazon Pinpoint, an identity is an email address or domain that you use when you send email. Before you can use an identity to send email with Amazon Pinpoint, you first have to verify it. By verifying an address, you demonstrate that you're the owner of the address, and that you've given Amazon Pinpoint permission to send email from the address.</p> 
/// <p>When you verify an email address, Amazon Pinpoint sends an email to the address. Your email address is verified as soon as you follow the link in the verification email. </p> 
/// <p>When you verify a domain, this operation provides a set of DKIM tokens, which you can convert into CNAME tokens. You add these CNAME tokens to the DNS configuration for your domain. Your domain is verified when Amazon Pinpoint detects these records in the DNS configuration for your domain. It usually takes around 72 hours to complete the domain verification process.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateEmailIdentityFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::create_email_identity::builders::CreateEmailIdentityInputBuilder,
}
impl CreateEmailIdentityFluentBuilder  {
    /// Creates a new `CreateEmailIdentity`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the CreateEmailIdentity as a reference.
    pub fn as_input(&self) -> &crate::operation::create_email_identity::builders::CreateEmailIdentityInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::create_email_identity::CreateEmailIdentity, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::create_email_identity::CreateEmailIdentityError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::create_email_identity::CreateEmailIdentityOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_email_identity::CreateEmailIdentityError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::create_email_identity::CreateEmailIdentityOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_email_identity::CreateEmailIdentityError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::create_email_identity::CreateEmailIdentity, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::create_email_identity::CreateEmailIdentityError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The email address or domain that you want to verify.</p>
    pub fn email_identity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.email_identity(input.into());
        self
    }
    /// <p>The email address or domain that you want to verify.</p>
    pub fn set_email_identity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_email_identity(input);
        self
    }
    /// <p>The email address or domain that you want to verify.</p>
    pub fn get_email_identity(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_email_identity()
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of objects that define the tags (keys and values) that you want to associate with the email identity.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of objects that define the tags (keys and values) that you want to associate with the email identity.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>An array of objects that define the tags (keys and values) that you want to associate with the email identity.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}

