// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_traffic_distribution::_update_traffic_distribution_output::UpdateTrafficDistributionOutputBuilder;

pub use crate::operation::update_traffic_distribution::_update_traffic_distribution_input::UpdateTrafficDistributionInputBuilder;

impl UpdateTrafficDistributionInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::update_traffic_distribution::UpdateTrafficDistributionOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::update_traffic_distribution::UpdateTrafficDistributionError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.update_traffic_distribution();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `UpdateTrafficDistribution`.
/// 
/// <p>Updates the traffic distribution for a given traffic distribution group. </p> 
/// <p>For more information about updating a traffic distribution group, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/update-telephony-traffic-distribution.html">Update telephony traffic distribution across Amazon Web Services Regions </a> in the <i>Amazon Connect Administrator Guide</i>. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateTrafficDistributionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::update_traffic_distribution::builders::UpdateTrafficDistributionInputBuilder,
}
impl UpdateTrafficDistributionFluentBuilder  {
    /// Creates a new `UpdateTrafficDistribution`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the UpdateTrafficDistribution as a reference.
    pub fn as_input(&self) -> &crate::operation::update_traffic_distribution::builders::UpdateTrafficDistributionInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::update_traffic_distribution::UpdateTrafficDistribution, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::update_traffic_distribution::UpdateTrafficDistributionError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::update_traffic_distribution::UpdateTrafficDistributionOutput, ::aws_smithy_http::result::SdkError<crate::operation::update_traffic_distribution::UpdateTrafficDistributionError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::update_traffic_distribution::UpdateTrafficDistributionOutput, ::aws_smithy_http::result::SdkError<crate::operation::update_traffic_distribution::UpdateTrafficDistributionError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::update_traffic_distribution::UpdateTrafficDistribution, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::update_traffic_distribution::UpdateTrafficDistributionError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_id()
    }
    /// <p>The distribution of traffic between the instance and its replica(s).</p>
    pub fn telephony_config(mut self, input: crate::types::TelephonyConfig) -> Self {
        self.inner = self.inner.telephony_config(input);
        self
    }
    /// <p>The distribution of traffic between the instance and its replica(s).</p>
    pub fn set_telephony_config(mut self, input: ::std::option::Option<crate::types::TelephonyConfig>) -> Self {
        self.inner = self.inner.set_telephony_config(input);
        self
    }
    /// <p>The distribution of traffic between the instance and its replica(s).</p>
    pub fn get_telephony_config(&self) -> &::std::option::Option<crate::types::TelephonyConfig> {
        self.inner.get_telephony_config()
    }
}

