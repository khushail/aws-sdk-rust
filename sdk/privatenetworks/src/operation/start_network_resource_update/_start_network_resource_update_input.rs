// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartNetworkResourceUpdateInput  {
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    #[doc(hidden)]
    pub network_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The update type.</p> 
    /// <ul> 
    /// <li> <p> <code>REPLACE</code> - Submits a request to replace a defective radio unit. We provide a shipping label that you can use for the return process and we ship a replacement radio unit to you.</p> </li> 
    /// <li> <p> <code>RETURN</code> - Submits a request to replace a radio unit that you no longer need. We provide a shipping label that you can use for the return process.</p> </li> 
    /// </ul>
    #[doc(hidden)]
    pub update_type: ::std::option::Option<crate::types::UpdateType>,
    /// <p>The shipping address. If you don't provide a shipping address when replacing or returning a network resource, we use the address from the original order for the network resource.</p>
    #[doc(hidden)]
    pub shipping_address: ::std::option::Option<crate::types::Address>,
    /// <p>The reason for the return. Providing a reason for a return is optional.</p>
    #[doc(hidden)]
    pub return_reason: ::std::option::Option<::std::string::String>,
}
impl StartNetworkResourceUpdateInput {
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    pub fn network_resource_arn(&self) -> ::std::option::Option<& str> {
        self.network_resource_arn.as_deref()
    }
    /// <p>The update type.</p> 
    /// <ul> 
    /// <li> <p> <code>REPLACE</code> - Submits a request to replace a defective radio unit. We provide a shipping label that you can use for the return process and we ship a replacement radio unit to you.</p> </li> 
    /// <li> <p> <code>RETURN</code> - Submits a request to replace a radio unit that you no longer need. We provide a shipping label that you can use for the return process.</p> </li> 
    /// </ul>
    pub fn update_type(&self) -> ::std::option::Option<& crate::types::UpdateType> {
        self.update_type.as_ref()
    }
    /// <p>The shipping address. If you don't provide a shipping address when replacing or returning a network resource, we use the address from the original order for the network resource.</p>
    pub fn shipping_address(&self) -> ::std::option::Option<& crate::types::Address> {
        self.shipping_address.as_ref()
    }
    /// <p>The reason for the return. Providing a reason for a return is optional.</p>
    pub fn return_reason(&self) -> ::std::option::Option<& str> {
        self.return_reason.as_deref()
    }
}
impl StartNetworkResourceUpdateInput {
    /// Creates a new builder-style object to manufacture [`StartNetworkResourceUpdateInput`](crate::operation::start_network_resource_update::StartNetworkResourceUpdateInput).
    pub fn builder() -> crate::operation::start_network_resource_update::builders::StartNetworkResourceUpdateInputBuilder {
        crate::operation::start_network_resource_update::builders::StartNetworkResourceUpdateInputBuilder::default()
    }
}

/// A builder for [`StartNetworkResourceUpdateInput`](crate::operation::start_network_resource_update::StartNetworkResourceUpdateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartNetworkResourceUpdateInputBuilder {
    pub(crate) network_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) update_type: ::std::option::Option<crate::types::UpdateType>,
    pub(crate) shipping_address: ::std::option::Option<crate::types::Address>,
    pub(crate) return_reason: ::std::option::Option<::std::string::String>,
}
impl StartNetworkResourceUpdateInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    pub fn network_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    pub fn set_network_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_resource_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    pub fn get_network_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_resource_arn
    }
    /// <p>The update type.</p> 
    /// <ul> 
    /// <li> <p> <code>REPLACE</code> - Submits a request to replace a defective radio unit. We provide a shipping label that you can use for the return process and we ship a replacement radio unit to you.</p> </li> 
    /// <li> <p> <code>RETURN</code> - Submits a request to replace a radio unit that you no longer need. We provide a shipping label that you can use for the return process.</p> </li> 
    /// </ul>
    pub fn update_type(mut self, input: crate::types::UpdateType) -> Self {
        self.update_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The update type.</p> 
    /// <ul> 
    /// <li> <p> <code>REPLACE</code> - Submits a request to replace a defective radio unit. We provide a shipping label that you can use for the return process and we ship a replacement radio unit to you.</p> </li> 
    /// <li> <p> <code>RETURN</code> - Submits a request to replace a radio unit that you no longer need. We provide a shipping label that you can use for the return process.</p> </li> 
    /// </ul>
    pub fn set_update_type(mut self, input: ::std::option::Option<crate::types::UpdateType>) -> Self {
        self.update_type = input; self
    }
    /// <p>The update type.</p> 
    /// <ul> 
    /// <li> <p> <code>REPLACE</code> - Submits a request to replace a defective radio unit. We provide a shipping label that you can use for the return process and we ship a replacement radio unit to you.</p> </li> 
    /// <li> <p> <code>RETURN</code> - Submits a request to replace a radio unit that you no longer need. We provide a shipping label that you can use for the return process.</p> </li> 
    /// </ul>
    pub fn get_update_type(&self) -> &::std::option::Option<crate::types::UpdateType> {
        &self.update_type
    }
    /// <p>The shipping address. If you don't provide a shipping address when replacing or returning a network resource, we use the address from the original order for the network resource.</p>
    pub fn shipping_address(mut self, input: crate::types::Address) -> Self {
        self.shipping_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The shipping address. If you don't provide a shipping address when replacing or returning a network resource, we use the address from the original order for the network resource.</p>
    pub fn set_shipping_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.shipping_address = input; self
    }
    /// <p>The shipping address. If you don't provide a shipping address when replacing or returning a network resource, we use the address from the original order for the network resource.</p>
    pub fn get_shipping_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.shipping_address
    }
    /// <p>The reason for the return. Providing a reason for a return is optional.</p>
    pub fn return_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.return_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the return. Providing a reason for a return is optional.</p>
    pub fn set_return_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.return_reason = input; self
    }
    /// <p>The reason for the return. Providing a reason for a return is optional.</p>
    pub fn get_return_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.return_reason
    }
    /// Consumes the builder and constructs a [`StartNetworkResourceUpdateInput`](crate::operation::start_network_resource_update::StartNetworkResourceUpdateInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::start_network_resource_update::StartNetworkResourceUpdateInput, ::aws_smithy_http::operation::error::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::start_network_resource_update::StartNetworkResourceUpdateInput {
                network_resource_arn: self.network_resource_arn
                ,
                update_type: self.update_type
                ,
                shipping_address: self.shipping_address
                ,
                return_reason: self.return_reason
                ,
            }
        )
    }
}

