// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disassociate_connection_from_lag::_disassociate_connection_from_lag_output::DisassociateConnectionFromLagOutputBuilder;

pub use crate::operation::disassociate_connection_from_lag::_disassociate_connection_from_lag_input::DisassociateConnectionFromLagInputBuilder;

impl DisassociateConnectionFromLagInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::disassociate_connection_from_lag::DisassociateConnectionFromLagOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::disassociate_connection_from_lag::DisassociateConnectionFromLagError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.disassociate_connection_from_lag();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `DisassociateConnectionFromLag`.
/// 
/// <p>Disassociates a connection from a link aggregation group (LAG). The connection is interrupted and re-established as a standalone connection (the connection is not deleted; to delete the connection, use the <code>DeleteConnection</code> request). If the LAG has associated virtual interfaces or hosted connections, they remain associated with the LAG. A disassociated connection owned by an Direct Connect Partner is automatically converted to an interconnect.</p> 
/// <p>If disassociating the connection would cause the LAG to fall below its setting for minimum number of operational connections, the request fails, except when it's the last member of the LAG. If all connections are disassociated, the LAG continues to exist as an empty LAG with no physical connections. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DisassociateConnectionFromLagFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::disassociate_connection_from_lag::builders::DisassociateConnectionFromLagInputBuilder,
}
impl DisassociateConnectionFromLagFluentBuilder  {
    /// Creates a new `DisassociateConnectionFromLag`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the DisassociateConnectionFromLag as a reference.
    pub fn as_input(&self) -> &crate::operation::disassociate_connection_from_lag::builders::DisassociateConnectionFromLagInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::disassociate_connection_from_lag::DisassociateConnectionFromLag, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::disassociate_connection_from_lag::DisassociateConnectionFromLagError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::disassociate_connection_from_lag::DisassociateConnectionFromLagOutput, ::aws_smithy_http::result::SdkError<crate::operation::disassociate_connection_from_lag::DisassociateConnectionFromLagError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::disassociate_connection_from_lag::DisassociateConnectionFromLagOutput, ::aws_smithy_http::result::SdkError<crate::operation::disassociate_connection_from_lag::DisassociateConnectionFromLagError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::disassociate_connection_from_lag::DisassociateConnectionFromLag, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::disassociate_connection_from_lag::DisassociateConnectionFromLagError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The ID of the connection.</p>
    pub fn connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.connection_id(input.into());
        self
    }
    /// <p>The ID of the connection.</p>
    pub fn set_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_connection_id(input);
        self
    }
    /// <p>The ID of the connection.</p>
    pub fn get_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_connection_id()
    }
    /// <p>The ID of the LAG.</p>
    pub fn lag_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.lag_id(input.into());
        self
    }
    /// <p>The ID of the LAG.</p>
    pub fn set_lag_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_lag_id(input);
        self
    }
    /// <p>The ID of the LAG.</p>
    pub fn get_lag_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_lag_id()
    }
}

