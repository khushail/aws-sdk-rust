// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_receipt_rule::_create_receipt_rule_output::CreateReceiptRuleOutputBuilder;

pub use crate::operation::create_receipt_rule::_create_receipt_rule_input::CreateReceiptRuleInputBuilder;

impl CreateReceiptRuleInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::create_receipt_rule::CreateReceiptRuleOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::create_receipt_rule::CreateReceiptRuleError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.create_receipt_rule();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `CreateReceiptRule`.
/// 
/// <p>Creates a receipt rule.</p> 
/// <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> 
/// <p>You can execute this operation no more than once per second.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateReceiptRuleFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::create_receipt_rule::builders::CreateReceiptRuleInputBuilder,
}
impl CreateReceiptRuleFluentBuilder  {
    /// Creates a new `CreateReceiptRule`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the CreateReceiptRule as a reference.
    pub fn as_input(&self) -> &crate::operation::create_receipt_rule::builders::CreateReceiptRuleInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::create_receipt_rule::CreateReceiptRule, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::create_receipt_rule::CreateReceiptRuleError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::create_receipt_rule::CreateReceiptRuleOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_receipt_rule::CreateReceiptRuleError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::create_receipt_rule::CreateReceiptRuleOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_receipt_rule::CreateReceiptRuleError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::create_receipt_rule::CreateReceiptRule, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::create_receipt_rule::CreateReceiptRuleError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The name of the rule set that the receipt rule will be added to.</p>
    pub fn rule_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.rule_set_name(input.into());
        self
    }
    /// <p>The name of the rule set that the receipt rule will be added to.</p>
    pub fn set_rule_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_rule_set_name(input);
        self
    }
    /// <p>The name of the rule set that the receipt rule will be added to.</p>
    pub fn get_rule_set_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_rule_set_name()
    }
    /// <p>The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.</p>
    pub fn after(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.after(input.into());
        self
    }
    /// <p>The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.</p>
    pub fn set_after(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_after(input);
        self
    }
    /// <p>The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.</p>
    pub fn get_after(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_after()
    }
    /// <p>A data structure that contains the specified rule's name, actions, recipients, domains, enabled status, scan status, and TLS policy.</p>
    pub fn rule(mut self, input: crate::types::ReceiptRule) -> Self {
        self.inner = self.inner.rule(input);
        self
    }
    /// <p>A data structure that contains the specified rule's name, actions, recipients, domains, enabled status, scan status, and TLS policy.</p>
    pub fn set_rule(mut self, input: ::std::option::Option<crate::types::ReceiptRule>) -> Self {
        self.inner = self.inner.set_rule(input);
        self
    }
    /// <p>A data structure that contains the specified rule's name, actions, recipients, domains, enabled status, scan status, and TLS policy.</p>
    pub fn get_rule(&self) -> &::std::option::Option<crate::types::ReceiptRule> {
        self.inner.get_rule()
    }
}

