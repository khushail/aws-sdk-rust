// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_outpost_instance_types_output_next_token(input: &crate::operation::get_outpost_instance_types::GetOutpostInstanceTypesOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_assets_output_next_token(input: &crate::operation::list_assets::ListAssetsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_catalog_items_output_next_token(input: &crate::operation::list_catalog_items::ListCatalogItemsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_orders_output_next_token(input: &crate::operation::list_orders::ListOrdersOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_outposts_output_next_token(input: &crate::operation::list_outposts::ListOutpostsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_sites_output_next_token(input: &crate::operation::list_sites::ListSitesOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

