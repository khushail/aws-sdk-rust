// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_subscriber_notification::_create_subscriber_notification_output::CreateSubscriberNotificationOutputBuilder;

pub use crate::operation::create_subscriber_notification::_create_subscriber_notification_input::CreateSubscriberNotificationInputBuilder;

impl CreateSubscriberNotificationInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::create_subscriber_notification::CreateSubscriberNotificationOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::create_subscriber_notification::CreateSubscriberNotificationError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.create_subscriber_notification();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `CreateSubscriberNotification`.
/// 
/// <p>Notifies the subscriber when new data is written to the data lake for the sources that the subscriber consumes in Security Lake. You can create only one subscriber notification per subscriber.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateSubscriberNotificationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::create_subscriber_notification::builders::CreateSubscriberNotificationInputBuilder,
}
impl CreateSubscriberNotificationFluentBuilder  {
    /// Creates a new `CreateSubscriberNotification`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the CreateSubscriberNotification as a reference.
    pub fn as_input(&self) -> &crate::operation::create_subscriber_notification::builders::CreateSubscriberNotificationInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::create_subscriber_notification::CreateSubscriberNotification, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::create_subscriber_notification::CreateSubscriberNotificationError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::create_subscriber_notification::CreateSubscriberNotificationOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_subscriber_notification::CreateSubscriberNotificationError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::create_subscriber_notification::CreateSubscriberNotificationOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_subscriber_notification::CreateSubscriberNotificationError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::create_subscriber_notification::CreateSubscriberNotification, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::create_subscriber_notification::CreateSubscriberNotificationError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The subscriber ID for the notification subscription.</p>
    pub fn subscriber_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.subscriber_id(input.into());
        self
    }
    /// <p>The subscriber ID for the notification subscription.</p>
    pub fn set_subscriber_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_subscriber_id(input);
        self
    }
    /// <p>The subscriber ID for the notification subscription.</p>
    pub fn get_subscriber_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_subscriber_id()
    }
    /// <p>Specify the configuration using which you want to create the subscriber notification.</p>
    pub fn configuration(mut self, input: crate::types::NotificationConfiguration) -> Self {
        self.inner = self.inner.configuration(input);
        self
    }
    /// <p>Specify the configuration using which you want to create the subscriber notification.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::NotificationConfiguration>) -> Self {
        self.inner = self.inner.set_configuration(input);
        self
    }
    /// <p>Specify the configuration using which you want to create the subscriber notification.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::NotificationConfiguration> {
        self.inner.get_configuration()
    }
}

