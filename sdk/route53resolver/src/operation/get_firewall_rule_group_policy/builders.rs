// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_firewall_rule_group_policy::_get_firewall_rule_group_policy_output::GetFirewallRuleGroupPolicyOutputBuilder;

pub use crate::operation::get_firewall_rule_group_policy::_get_firewall_rule_group_policy_input::GetFirewallRuleGroupPolicyInputBuilder;

impl GetFirewallRuleGroupPolicyInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.get_firewall_rule_group_policy();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `GetFirewallRuleGroupPolicy`.
/// 
/// <p>Returns the Identity and Access Management (Amazon Web Services IAM) policy for sharing the specified rule group. You can use the policy to share the rule group using Resource Access Manager (RAM). </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetFirewallRuleGroupPolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::get_firewall_rule_group_policy::builders::GetFirewallRuleGroupPolicyInputBuilder,
}
impl GetFirewallRuleGroupPolicyFluentBuilder  {
    /// Creates a new `GetFirewallRuleGroupPolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the GetFirewallRuleGroupPolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::get_firewall_rule_group_policy::builders::GetFirewallRuleGroupPolicyInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicy, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyOutput, ::aws_smithy_http::result::SdkError<crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyOutput, ::aws_smithy_http::result::SdkError<crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicy, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The ARN (Amazon Resource Name) for the rule group.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The ARN (Amazon Resource Name) for the rule group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The ARN (Amazon Resource Name) for the rule group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_arn()
    }
}

