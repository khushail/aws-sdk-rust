// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_resolver_rule_policy::_get_resolver_rule_policy_output::GetResolverRulePolicyOutputBuilder;

pub use crate::operation::get_resolver_rule_policy::_get_resolver_rule_policy_input::GetResolverRulePolicyInputBuilder;

impl GetResolverRulePolicyInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::get_resolver_rule_policy::GetResolverRulePolicyOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.get_resolver_rule_policy();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `GetResolverRulePolicy`.
/// 
/// <p>Gets information about the Resolver rule policy for a specified rule. A Resolver rule policy includes the rule that you want to share with another account, the account that you want to share the rule with, and the Resolver operations that you want to allow the account to use. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetResolverRulePolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::get_resolver_rule_policy::builders::GetResolverRulePolicyInputBuilder,
}
impl GetResolverRulePolicyFluentBuilder  {
    /// Creates a new `GetResolverRulePolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the GetResolverRulePolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::get_resolver_rule_policy::builders::GetResolverRulePolicyInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::get_resolver_rule_policy::GetResolverRulePolicy, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::get_resolver_rule_policy::GetResolverRulePolicyOutput, ::aws_smithy_http::result::SdkError<crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::get_resolver_rule_policy::GetResolverRulePolicyOutput, ::aws_smithy_http::result::SdkError<crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::get_resolver_rule_policy::GetResolverRulePolicy, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The ID of the Resolver rule that you want to get the Resolver rule policy for.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The ID of the Resolver rule that you want to get the Resolver rule policy for.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The ID of the Resolver rule that you want to get the Resolver rule policy for.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_arn()
    }
}

