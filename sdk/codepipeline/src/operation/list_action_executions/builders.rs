// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_action_executions::_list_action_executions_output::ListActionExecutionsOutputBuilder;

pub use crate::operation::list_action_executions::_list_action_executions_input::ListActionExecutionsInputBuilder;

impl ListActionExecutionsInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::list_action_executions::ListActionExecutionsOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::list_action_executions::ListActionExecutionsError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.list_action_executions();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `ListActionExecutions`.
/// 
/// <p>Lists the action executions that have occurred in a pipeline.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListActionExecutionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::list_action_executions::builders::ListActionExecutionsInputBuilder,
}
impl ListActionExecutionsFluentBuilder  {
    /// Creates a new `ListActionExecutions`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the ListActionExecutions as a reference.
    pub fn as_input(&self) -> &crate::operation::list_action_executions::builders::ListActionExecutionsInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::list_action_executions::ListActionExecutions, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::list_action_executions::ListActionExecutionsError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::list_action_executions::ListActionExecutionsOutput, ::aws_smithy_http::result::SdkError<crate::operation::list_action_executions::ListActionExecutionsError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::list_action_executions::ListActionExecutionsOutput, ::aws_smithy_http::result::SdkError<crate::operation::list_action_executions::ListActionExecutionsError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::list_action_executions::ListActionExecutions, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::list_action_executions::ListActionExecutionsError>
                            >  {
                                self.customize_middleware().await
                            }
    /// Create a paginator for this request
                            ///
                            /// Paginators are used by calling [`send().await`](crate::operation::list_action_executions::paginator::ListActionExecutionsPaginator::send) which returns a `Stream`.
                            pub fn into_paginator(self) -> crate::operation::list_action_executions::paginator::ListActionExecutionsPaginator {
                                crate::operation::list_action_executions::paginator::ListActionExecutionsPaginator::new(self.handle, self.inner)
                            }
    /// <p> The name of the pipeline for which you want to list action execution history.</p>
    pub fn pipeline_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.pipeline_name(input.into());
        self
    }
    /// <p> The name of the pipeline for which you want to list action execution history.</p>
    pub fn set_pipeline_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_name(input);
        self
    }
    /// <p> The name of the pipeline for which you want to list action execution history.</p>
    pub fn get_pipeline_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_pipeline_name()
    }
    /// <p>Input information used to filter action execution history.</p>
    pub fn filter(mut self, input: crate::types::ActionExecutionFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>Input information used to filter action execution history.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::ActionExecutionFilter>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
    /// <p>Input information used to filter action execution history.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::ActionExecutionFilter> {
        self.inner.get_filter()
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Action execution history is retained for up to 12 months, based on action execution start times. Default value is 100. </p> <note> 
    /// <p>Detailed execution history is available for executions run on or after February 21, 2019.</p> 
    /// </note>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Action execution history is retained for up to 12 months, based on action execution start times. Default value is 100. </p> <note> 
    /// <p>Detailed execution history is available for executions run on or after February 21, 2019.</p> 
    /// </note>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Action execution history is retained for up to 12 months, based on action execution start times. Default value is 100. </p> <note> 
    /// <p>Detailed execution history is available for executions run on or after February 21, 2019.</p> 
    /// </note>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>The token that was returned from the previous <code>ListActionExecutions</code> call, which can be used to return the next set of action executions in the list.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token that was returned from the previous <code>ListActionExecutions</code> call, which can be used to return the next set of action executions in the list.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token that was returned from the previous <code>ListActionExecutions</code> call, which can be used to return the next set of action executions in the list.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}

