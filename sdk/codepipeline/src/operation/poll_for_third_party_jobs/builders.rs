// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::poll_for_third_party_jobs::_poll_for_third_party_jobs_output::PollForThirdPartyJobsOutputBuilder;

pub use crate::operation::poll_for_third_party_jobs::_poll_for_third_party_jobs_input::PollForThirdPartyJobsInputBuilder;

impl PollForThirdPartyJobsInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.poll_for_third_party_jobs();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `PollForThirdPartyJobs`.
/// 
/// <p>Determines whether there are any third party jobs for a job worker to act on. Used for partner actions only.</p> <important> 
/// <p>When this API is called, CodePipeline returns temporary credentials for the S3 bucket used to store artifacts for the pipeline, if the action requires access to that S3 bucket for input or output artifacts.</p> 
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PollForThirdPartyJobsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::poll_for_third_party_jobs::builders::PollForThirdPartyJobsInputBuilder,
}
impl PollForThirdPartyJobsFluentBuilder  {
    /// Creates a new `PollForThirdPartyJobs`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the PollForThirdPartyJobs as a reference.
    pub fn as_input(&self) -> &crate::operation::poll_for_third_party_jobs::builders::PollForThirdPartyJobsInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobs, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsOutput, ::aws_smithy_http::result::SdkError<crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsOutput, ::aws_smithy_http::result::SdkError<crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobs, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::poll_for_third_party_jobs::PollForThirdPartyJobsError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>Represents information about an action type.</p>
    pub fn action_type_id(mut self, input: crate::types::ActionTypeId) -> Self {
        self.inner = self.inner.action_type_id(input);
        self
    }
    /// <p>Represents information about an action type.</p>
    pub fn set_action_type_id(mut self, input: ::std::option::Option<crate::types::ActionTypeId>) -> Self {
        self.inner = self.inner.set_action_type_id(input);
        self
    }
    /// <p>Represents information about an action type.</p>
    pub fn get_action_type_id(&self) -> &::std::option::Option<crate::types::ActionTypeId> {
        self.inner.get_action_type_id()
    }
    /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
    pub fn max_batch_size(mut self, input: i32) -> Self {
        self.inner = self.inner.max_batch_size(input);
        self
    }
    /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
    pub fn set_max_batch_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_batch_size(input);
        self
    }
    /// <p>The maximum number of jobs to return in a poll for jobs call.</p>
    pub fn get_max_batch_size(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_batch_size()
    }
}

