// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_put_message::_batch_put_message_output::BatchPutMessageOutputBuilder;

pub use crate::operation::batch_put_message::_batch_put_message_input::BatchPutMessageInputBuilder;

impl BatchPutMessageInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::batch_put_message::BatchPutMessageOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::batch_put_message::BatchPutMessageError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.batch_put_message();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `BatchPutMessage`.
/// 
/// <p>Sends messages to a channel.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct BatchPutMessageFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::batch_put_message::builders::BatchPutMessageInputBuilder,
}
impl BatchPutMessageFluentBuilder  {
    /// Creates a new `BatchPutMessage`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the BatchPutMessage as a reference.
    pub fn as_input(&self) -> &crate::operation::batch_put_message::builders::BatchPutMessageInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::batch_put_message::BatchPutMessage, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::batch_put_message::BatchPutMessageError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::batch_put_message::BatchPutMessageOutput, ::aws_smithy_http::result::SdkError<crate::operation::batch_put_message::BatchPutMessageError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::batch_put_message::BatchPutMessageOutput, ::aws_smithy_http::result::SdkError<crate::operation::batch_put_message::BatchPutMessageError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::batch_put_message::BatchPutMessage, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::batch_put_message::BatchPutMessageError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The name of the channel where the messages are sent.</p>
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.channel_name(input.into());
        self
    }
    /// <p>The name of the channel where the messages are sent.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_channel_name(input);
        self
    }
    /// <p>The name of the channel where the messages are sent.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_channel_name()
    }
    /// Appends an item to `messages`.
    ///
    /// To override the contents of this collection use [`set_messages`](Self::set_messages).
    ///
    /// <p>The list of messages to be sent. Each message has the format: { "messageId": "string", "payload": "string"}.</p> 
    /// <p>The field names of message payloads (data) that you send to IoT Analytics:</p> 
    /// <ul> 
    /// <li> <p>Must contain only alphanumeric characters and undescores (_). No other special characters are allowed.</p> </li> 
    /// <li> <p>Must begin with an alphabetic character or single underscore (_).</p> </li> 
    /// <li> <p>Cannot contain hyphens (-).</p> </li> 
    /// <li> <p>In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$". </p> </li> 
    /// <li> <p>Cannot be more than 255 characters.</p> </li> 
    /// <li> <p>Are case insensitive. (Fields named foo and FOO in the same payload are considered duplicates.)</p> </li> 
    /// </ul> 
    /// <p>For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads. </p>
    pub fn messages(mut self, input: crate::types::Message) -> Self {
        self.inner = self.inner.messages(input);
        self
    }
    /// <p>The list of messages to be sent. Each message has the format: { "messageId": "string", "payload": "string"}.</p> 
    /// <p>The field names of message payloads (data) that you send to IoT Analytics:</p> 
    /// <ul> 
    /// <li> <p>Must contain only alphanumeric characters and undescores (_). No other special characters are allowed.</p> </li> 
    /// <li> <p>Must begin with an alphabetic character or single underscore (_).</p> </li> 
    /// <li> <p>Cannot contain hyphens (-).</p> </li> 
    /// <li> <p>In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$". </p> </li> 
    /// <li> <p>Cannot be more than 255 characters.</p> </li> 
    /// <li> <p>Are case insensitive. (Fields named foo and FOO in the same payload are considered duplicates.)</p> </li> 
    /// </ul> 
    /// <p>For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads. </p>
    pub fn set_messages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Message>>) -> Self {
        self.inner = self.inner.set_messages(input);
        self
    }
    /// <p>The list of messages to be sent. Each message has the format: { "messageId": "string", "payload": "string"}.</p> 
    /// <p>The field names of message payloads (data) that you send to IoT Analytics:</p> 
    /// <ul> 
    /// <li> <p>Must contain only alphanumeric characters and undescores (_). No other special characters are allowed.</p> </li> 
    /// <li> <p>Must begin with an alphabetic character or single underscore (_).</p> </li> 
    /// <li> <p>Cannot contain hyphens (-).</p> </li> 
    /// <li> <p>In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$". </p> </li> 
    /// <li> <p>Cannot be more than 255 characters.</p> </li> 
    /// <li> <p>Are case insensitive. (Fields named foo and FOO in the same payload are considered duplicates.)</p> </li> 
    /// </ul> 
    /// <p>For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads. </p>
    pub fn get_messages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Message>> {
        self.inner.get_messages()
    }
}

