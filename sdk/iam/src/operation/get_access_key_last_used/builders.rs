// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_access_key_last_used::_get_access_key_last_used_output::GetAccessKeyLastUsedOutputBuilder;

pub use crate::operation::get_access_key_last_used::_get_access_key_last_used_input::GetAccessKeyLastUsedInputBuilder;

impl GetAccessKeyLastUsedInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::get_access_key_last_used::GetAccessKeyLastUsedOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::get_access_key_last_used::GetAccessKeyLastUsedError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.get_access_key_last_used();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `GetAccessKeyLastUsed`.
/// 
/// <p>Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the Amazon Web Services service and Region that were specified in the last request made with that key.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetAccessKeyLastUsedFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::get_access_key_last_used::builders::GetAccessKeyLastUsedInputBuilder,
}
impl GetAccessKeyLastUsedFluentBuilder  {
    /// Creates a new `GetAccessKeyLastUsed`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the GetAccessKeyLastUsed as a reference.
    pub fn as_input(&self) -> &crate::operation::get_access_key_last_used::builders::GetAccessKeyLastUsedInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::get_access_key_last_used::GetAccessKeyLastUsed, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::get_access_key_last_used::GetAccessKeyLastUsedError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::get_access_key_last_used::GetAccessKeyLastUsedOutput, ::aws_smithy_http::result::SdkError<crate::operation::get_access_key_last_used::GetAccessKeyLastUsedError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::get_access_key_last_used::GetAccessKeyLastUsedOutput, ::aws_smithy_http::result::SdkError<crate::operation::get_access_key_last_used::GetAccessKeyLastUsedError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::get_access_key_last_used::GetAccessKeyLastUsed, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::get_access_key_last_used::GetAccessKeyLastUsedError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The identifier of an access key.</p> 
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
    pub fn access_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.access_key_id(input.into());
        self
    }
    /// <p>The identifier of an access key.</p> 
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
    pub fn set_access_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_access_key_id(input);
        self
    }
    /// <p>The identifier of an access key.</p> 
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
    pub fn get_access_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_access_key_id()
    }
}

