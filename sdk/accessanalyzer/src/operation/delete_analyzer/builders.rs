// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_analyzer::_delete_analyzer_output::DeleteAnalyzerOutputBuilder;

pub use crate::operation::delete_analyzer::_delete_analyzer_input::DeleteAnalyzerInputBuilder;

impl DeleteAnalyzerInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::delete_analyzer::DeleteAnalyzerOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::delete_analyzer::DeleteAnalyzerError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.delete_analyzer();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `DeleteAnalyzer`.
/// 
/// <p>Deletes the specified analyzer. When you delete an analyzer, IAM Access Analyzer is disabled for the account or organization in the current or specific Region. All findings that were generated by the analyzer are deleted. You cannot undo this action.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteAnalyzerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::delete_analyzer::builders::DeleteAnalyzerInputBuilder,
}
impl DeleteAnalyzerFluentBuilder  {
    /// Creates a new `DeleteAnalyzer`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the DeleteAnalyzer as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_analyzer::builders::DeleteAnalyzerInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::delete_analyzer::DeleteAnalyzer, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::delete_analyzer::DeleteAnalyzerError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::delete_analyzer::DeleteAnalyzerOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_analyzer::DeleteAnalyzerError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::delete_analyzer::DeleteAnalyzerOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_analyzer::DeleteAnalyzerError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::delete_analyzer::DeleteAnalyzer, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::delete_analyzer::DeleteAnalyzerError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The name of the analyzer to delete.</p>
    pub fn analyzer_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.analyzer_name(input.into());
        self
    }
    /// <p>The name of the analyzer to delete.</p>
    pub fn set_analyzer_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_analyzer_name(input);
        self
    }
    /// <p>The name of the analyzer to delete.</p>
    pub fn get_analyzer_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_analyzer_name()
    }
    /// <p>A client token.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A client token.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A client token.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}

