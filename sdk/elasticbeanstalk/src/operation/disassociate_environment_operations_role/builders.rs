// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disassociate_environment_operations_role::_disassociate_environment_operations_role_output::DisassociateEnvironmentOperationsRoleOutputBuilder;

pub use crate::operation::disassociate_environment_operations_role::_disassociate_environment_operations_role_input::DisassociateEnvironmentOperationsRoleInputBuilder;

impl DisassociateEnvironmentOperationsRoleInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::disassociate_environment_operations_role::DisassociateEnvironmentOperationsRoleOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::disassociate_environment_operations_role::DisassociateEnvironmentOperationsRoleError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.disassociate_environment_operations_role();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `DisassociateEnvironmentOperationsRole`.
/// 
/// <p>Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses the caller's permissions for permissions to downstream services during subsequent calls acting on this environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DisassociateEnvironmentOperationsRoleFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::disassociate_environment_operations_role::builders::DisassociateEnvironmentOperationsRoleInputBuilder,
}
impl DisassociateEnvironmentOperationsRoleFluentBuilder  {
    /// Creates a new `DisassociateEnvironmentOperationsRole`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the DisassociateEnvironmentOperationsRole as a reference.
    pub fn as_input(&self) -> &crate::operation::disassociate_environment_operations_role::builders::DisassociateEnvironmentOperationsRoleInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::disassociate_environment_operations_role::DisassociateEnvironmentOperationsRole, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::disassociate_environment_operations_role::DisassociateEnvironmentOperationsRoleError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::disassociate_environment_operations_role::DisassociateEnvironmentOperationsRoleOutput, ::aws_smithy_http::result::SdkError<crate::operation::disassociate_environment_operations_role::DisassociateEnvironmentOperationsRoleError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::disassociate_environment_operations_role::DisassociateEnvironmentOperationsRoleOutput, ::aws_smithy_http::result::SdkError<crate::operation::disassociate_environment_operations_role::DisassociateEnvironmentOperationsRoleError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::disassociate_environment_operations_role::DisassociateEnvironmentOperationsRole, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::disassociate_environment_operations_role::DisassociateEnvironmentOperationsRoleError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The name of the environment from which to disassociate the operations role.</p>
    pub fn environment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.environment_name(input.into());
        self
    }
    /// <p>The name of the environment from which to disassociate the operations role.</p>
    pub fn set_environment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_environment_name(input);
        self
    }
    /// <p>The name of the environment from which to disassociate the operations role.</p>
    pub fn get_environment_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_environment_name()
    }
}

