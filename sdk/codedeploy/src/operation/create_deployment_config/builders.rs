// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_deployment_config::_create_deployment_config_output::CreateDeploymentConfigOutputBuilder;

pub use crate::operation::create_deployment_config::_create_deployment_config_input::CreateDeploymentConfigInputBuilder;

impl CreateDeploymentConfigInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::create_deployment_config::CreateDeploymentConfigOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::create_deployment_config::CreateDeploymentConfigError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.create_deployment_config();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `CreateDeploymentConfig`.
/// 
/// <p> Creates a deployment configuration. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateDeploymentConfigFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::create_deployment_config::builders::CreateDeploymentConfigInputBuilder,
}
impl CreateDeploymentConfigFluentBuilder  {
    /// Creates a new `CreateDeploymentConfig`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the CreateDeploymentConfig as a reference.
    pub fn as_input(&self) -> &crate::operation::create_deployment_config::builders::CreateDeploymentConfigInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::create_deployment_config::CreateDeploymentConfig, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::create_deployment_config::CreateDeploymentConfigError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::create_deployment_config::CreateDeploymentConfigOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_deployment_config::CreateDeploymentConfigError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::create_deployment_config::CreateDeploymentConfigOutput, ::aws_smithy_http::result::SdkError<crate::operation::create_deployment_config::CreateDeploymentConfigError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::create_deployment_config::CreateDeploymentConfig, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::create_deployment_config::CreateDeploymentConfigError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The name of the deployment configuration to create.</p>
    pub fn deployment_config_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.deployment_config_name(input.into());
        self
    }
    /// <p>The name of the deployment configuration to create.</p>
    pub fn set_deployment_config_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_deployment_config_name(input);
        self
    }
    /// <p>The name of the deployment configuration to create.</p>
    pub fn get_deployment_config_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_deployment_config_name()
    }
    /// <p>The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value.</p> 
    /// <p>The type parameter takes either of the following values:</p> 
    /// <ul> 
    /// <li> <p>HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.</p> </li> 
    /// <li> <p>FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, CodeDeploy converts the percentage to the equivalent number of instances and rounds up fractional instances.</p> </li> 
    /// </ul> 
    /// <p>The value parameter takes an integer.</p> 
    /// <p>For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.</p>
    pub fn minimum_healthy_hosts(mut self, input: crate::types::MinimumHealthyHosts) -> Self {
        self.inner = self.inner.minimum_healthy_hosts(input);
        self
    }
    /// <p>The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value.</p> 
    /// <p>The type parameter takes either of the following values:</p> 
    /// <ul> 
    /// <li> <p>HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.</p> </li> 
    /// <li> <p>FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, CodeDeploy converts the percentage to the equivalent number of instances and rounds up fractional instances.</p> </li> 
    /// </ul> 
    /// <p>The value parameter takes an integer.</p> 
    /// <p>For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.</p>
    pub fn set_minimum_healthy_hosts(mut self, input: ::std::option::Option<crate::types::MinimumHealthyHosts>) -> Self {
        self.inner = self.inner.set_minimum_healthy_hosts(input);
        self
    }
    /// <p>The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value.</p> 
    /// <p>The type parameter takes either of the following values:</p> 
    /// <ul> 
    /// <li> <p>HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.</p> </li> 
    /// <li> <p>FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, CodeDeploy converts the percentage to the equivalent number of instances and rounds up fractional instances.</p> </li> 
    /// </ul> 
    /// <p>The value parameter takes an integer.</p> 
    /// <p>For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.</p>
    pub fn get_minimum_healthy_hosts(&self) -> &::std::option::Option<crate::types::MinimumHealthyHosts> {
        self.inner.get_minimum_healthy_hosts()
    }
    /// <p>The configuration that specifies how the deployment traffic is routed.</p>
    pub fn traffic_routing_config(mut self, input: crate::types::TrafficRoutingConfig) -> Self {
        self.inner = self.inner.traffic_routing_config(input);
        self
    }
    /// <p>The configuration that specifies how the deployment traffic is routed.</p>
    pub fn set_traffic_routing_config(mut self, input: ::std::option::Option<crate::types::TrafficRoutingConfig>) -> Self {
        self.inner = self.inner.set_traffic_routing_config(input);
        self
    }
    /// <p>The configuration that specifies how the deployment traffic is routed.</p>
    pub fn get_traffic_routing_config(&self) -> &::std::option::Option<crate::types::TrafficRoutingConfig> {
        self.inner.get_traffic_routing_config()
    }
    /// <p>The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>).</p>
    pub fn compute_platform(mut self, input: crate::types::ComputePlatform) -> Self {
        self.inner = self.inner.compute_platform(input);
        self
    }
    /// <p>The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>).</p>
    pub fn set_compute_platform(mut self, input: ::std::option::Option<crate::types::ComputePlatform>) -> Self {
        self.inner = self.inner.set_compute_platform(input);
        self
    }
    /// <p>The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>).</p>
    pub fn get_compute_platform(&self) -> &::std::option::Option<crate::types::ComputePlatform> {
        self.inner.get_compute_platform()
    }
}

