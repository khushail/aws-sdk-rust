// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_detector::_describe_detector_output::DescribeDetectorOutputBuilder;

pub use crate::operation::describe_detector::_describe_detector_input::DescribeDetectorInputBuilder;

impl DescribeDetectorInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::describe_detector::DescribeDetectorOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::describe_detector::DescribeDetectorError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.describe_detector();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `DescribeDetector`.
/// 
/// <p>Returns information about the specified detector (instance).</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeDetectorFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::describe_detector::builders::DescribeDetectorInputBuilder,
}
impl DescribeDetectorFluentBuilder  {
    /// Creates a new `DescribeDetector`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the DescribeDetector as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_detector::builders::DescribeDetectorInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::describe_detector::DescribeDetector, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::describe_detector::DescribeDetectorError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::describe_detector::DescribeDetectorOutput, ::aws_smithy_http::result::SdkError<crate::operation::describe_detector::DescribeDetectorError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::describe_detector::DescribeDetectorOutput, ::aws_smithy_http::result::SdkError<crate::operation::describe_detector::DescribeDetectorError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::describe_detector::DescribeDetector, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::describe_detector::DescribeDetectorError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The name of the detector model whose detectors (instances) you want information about.</p>
    pub fn detector_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.detector_model_name(input.into());
        self
    }
    /// <p>The name of the detector model whose detectors (instances) you want information about.</p>
    pub fn set_detector_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_detector_model_name(input);
        self
    }
    /// <p>The name of the detector model whose detectors (instances) you want information about.</p>
    pub fn get_detector_model_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_detector_model_name()
    }
    /// <p>A filter used to limit results to detectors (instances) created because of the given key ID.</p>
    pub fn key_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key_value(input.into());
        self
    }
    /// <p>A filter used to limit results to detectors (instances) created because of the given key ID.</p>
    pub fn set_key_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key_value(input);
        self
    }
    /// <p>A filter used to limit results to detectors (instances) created because of the given key ID.</p>
    pub fn get_key_value(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key_value()
    }
}

