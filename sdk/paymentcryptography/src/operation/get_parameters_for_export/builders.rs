// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_parameters_for_export::_get_parameters_for_export_output::GetParametersForExportOutputBuilder;

pub use crate::operation::get_parameters_for_export::_get_parameters_for_export_input::GetParametersForExportInputBuilder;

impl GetParametersForExportInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::get_parameters_for_export::GetParametersForExportOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::get_parameters_for_export::GetParametersForExportError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.get_parameters_for_export();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `GetParametersForExport`.
/// 
/// <p>Gets the export token and the signing key certificate to initiate a TR-34 key export from Amazon Web Services Payment Cryptography.</p> 
/// <p>The signing key certificate signs the wrapped key under export within the TR-34 key payload. The export token and signing key certificate must be in place and operational before calling <code>ExportKey</code>. The export token expires in 7 days. You can use the same export token to export multiple keys from your service account.</p> 
/// <p> <b>Cross-account use:</b> This operation can't be used across different Amazon Web Services accounts.</p> 
/// <p> <b>Related operations:</b> </p> 
/// <ul> 
/// <li> <p> <code>ExportKey</code> </p> </li> 
/// <li> <p> <code>GetParametersForImport</code> </p> </li> 
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetParametersForExportFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::get_parameters_for_export::builders::GetParametersForExportInputBuilder,
}
impl GetParametersForExportFluentBuilder  {
    /// Creates a new `GetParametersForExport`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the GetParametersForExport as a reference.
    pub fn as_input(&self) -> &crate::operation::get_parameters_for_export::builders::GetParametersForExportInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::get_parameters_for_export::GetParametersForExport, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::get_parameters_for_export::GetParametersForExportError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::get_parameters_for_export::GetParametersForExportOutput, ::aws_smithy_http::result::SdkError<crate::operation::get_parameters_for_export::GetParametersForExportError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::get_parameters_for_export::GetParametersForExportOutput, ::aws_smithy_http::result::SdkError<crate::operation::get_parameters_for_export::GetParametersForExportError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::get_parameters_for_export::GetParametersForExport, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::get_parameters_for_export::GetParametersForExportError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The key block format type (for example, TR-34 or TR-31) to use during key material export. Export token is only required for a TR-34 key export, <code>TR34_KEY_BLOCK</code>. Export token is not required for TR-31 key export.</p>
    pub fn key_material_type(mut self, input: crate::types::KeyMaterialType) -> Self {
        self.inner = self.inner.key_material_type(input);
        self
    }
    /// <p>The key block format type (for example, TR-34 or TR-31) to use during key material export. Export token is only required for a TR-34 key export, <code>TR34_KEY_BLOCK</code>. Export token is not required for TR-31 key export.</p>
    pub fn set_key_material_type(mut self, input: ::std::option::Option<crate::types::KeyMaterialType>) -> Self {
        self.inner = self.inner.set_key_material_type(input);
        self
    }
    /// <p>The key block format type (for example, TR-34 or TR-31) to use during key material export. Export token is only required for a TR-34 key export, <code>TR34_KEY_BLOCK</code>. Export token is not required for TR-31 key export.</p>
    pub fn get_key_material_type(&self) -> &::std::option::Option<crate::types::KeyMaterialType> {
        self.inner.get_key_material_type()
    }
    /// <p>The signing key algorithm to generate a signing key certificate. This certificate signs the wrapped key under export within the TR-34 key block cryptogram. <code>RSA_2048</code> is the only signing key algorithm allowed.</p>
    pub fn signing_key_algorithm(mut self, input: crate::types::KeyAlgorithm) -> Self {
        self.inner = self.inner.signing_key_algorithm(input);
        self
    }
    /// <p>The signing key algorithm to generate a signing key certificate. This certificate signs the wrapped key under export within the TR-34 key block cryptogram. <code>RSA_2048</code> is the only signing key algorithm allowed.</p>
    pub fn set_signing_key_algorithm(mut self, input: ::std::option::Option<crate::types::KeyAlgorithm>) -> Self {
        self.inner = self.inner.set_signing_key_algorithm(input);
        self
    }
    /// <p>The signing key algorithm to generate a signing key certificate. This certificate signs the wrapped key under export within the TR-34 key block cryptogram. <code>RSA_2048</code> is the only signing key algorithm allowed.</p>
    pub fn get_signing_key_algorithm(&self) -> &::std::option::Option<crate::types::KeyAlgorithm> {
        self.inner.get_signing_key_algorithm()
    }
}

