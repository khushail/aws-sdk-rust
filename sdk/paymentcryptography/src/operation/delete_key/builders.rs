// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_key::_delete_key_output::DeleteKeyOutputBuilder;

pub use crate::operation::delete_key::_delete_key_input::DeleteKeyInputBuilder;

impl DeleteKeyInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::delete_key::DeleteKeyOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::delete_key::DeleteKeyError,
                            ::aws_smithy_http::operation::Response
                        >
                    >   {
                        let mut fluent_builder = client.delete_key();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
}
/// Fluent builder constructing a request to `DeleteKey`.
/// 
/// <p>Deletes the key material and all metadata associated with Amazon Web Services Payment Cryptography key.</p> 
/// <p>Key deletion is irreversible. After a key is deleted, you can't perform cryptographic operations using the key. For example, you can't decrypt data that was encrypted by a deleted Amazon Web Services Payment Cryptography key, and the data may become unrecoverable. Because key deletion is destructive, Amazon Web Services Payment Cryptography has a safety mechanism to prevent accidental deletion of a key. When you call this operation, Amazon Web Services Payment Cryptography disables the specified key but doesn't delete it until after a waiting period. The default waiting period is 7 days. To set a different waiting period, set <code>DeleteKeyInDays</code>. During the waiting period, the <code>KeyState</code> is <code>DELETE_PENDING</code>. After the key is deleted, the <code>KeyState</code> is <code>DELETE_COMPLETE</code>.</p> 
/// <p>If you delete key material, you can use <code>ImportKey</code> to reimport the same key material into the Amazon Web Services Payment Cryptography key.</p> 
/// <p>You should delete a key only when you are sure that you don't need to use it anymore and no other parties are utilizing this key. If you aren't sure, consider deactivating it instead by calling <code>StopKeyUsage</code>.</p> 
/// <p> <b>Cross-account use:</b> This operation can't be used across different Amazon Web Services accounts.</p> 
/// <p> <b>Related operations:</b> </p> 
/// <ul> 
/// <li> <p> <code>RestoreKey</code> </p> </li> 
/// <li> <p> <code>StartKeyUsage</code> </p> </li> 
/// <li> <p> <code>StopKeyUsage</code> </p> </li> 
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteKeyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::delete_key::builders::DeleteKeyInputBuilder,
}
impl DeleteKeyFluentBuilder  {
    /// Creates a new `DeleteKey`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: ::std::default::Default::default(),
        }
    }
    /// Access the DeleteKey as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_key::builders::DeleteKeyInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::delete_key::DeleteKey, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::delete_key::DeleteKeyError>
                        >  {
                            let handle = self.handle.clone();
                            let operation = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
                        }
    
                        // This function will go away in the near future. Do not rely on it.
                        #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::delete_key::DeleteKeyOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_key::DeleteKeyError>>
                         {
                            let op = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?
                                .make_operation(&self.handle.conf)
                                .await
                                .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
                            self.handle.client.call(op).await
                        }
    /// Sends the request and returns the response.
                            ///
                            /// If an error occurs, an `SdkError` will be returned with additional details that
                            /// can be matched against.
                            ///
                            /// By default, any retryable failures will be retried twice. Retry behavior
                            /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                            /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::delete_key::DeleteKeyOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_key::DeleteKeyError>>
                             {
                                self.send_middleware().await
                            }
    
                            /// Consumes this builder, creating a customizable operation that can be modified before being
                            /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::delete_key::DeleteKey, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::delete_key::DeleteKeyError>
                            >  {
                                self.customize_middleware().await
                            }
    /// <p>The <code>KeyARN</code> of the key that is scheduled for deletion.</p>
    pub fn key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key_identifier(input.into());
        self
    }
    /// <p>The <code>KeyARN</code> of the key that is scheduled for deletion.</p>
    pub fn set_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key_identifier(input);
        self
    }
    /// <p>The <code>KeyARN</code> of the key that is scheduled for deletion.</p>
    pub fn get_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key_identifier()
    }
    /// <p>The waiting period for key deletion. The default value is seven days.</p>
    pub fn delete_key_in_days(mut self, input: i32) -> Self {
        self.inner = self.inner.delete_key_in_days(input);
        self
    }
    /// <p>The waiting period for key deletion. The default value is seven days.</p>
    pub fn set_delete_key_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_delete_key_in_days(input);
        self
    }
    /// <p>The waiting period for key deletion. The default value is seven days.</p>
    pub fn get_delete_key_in_days(&self) -> &::std::option::Option<i32> {
        self.inner.get_delete_key_in_days()
    }
}

